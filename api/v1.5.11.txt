pkg github.com/drand/drand/chain, const BoltDB = "bolt"
pkg github.com/drand/drand/chain, const BoltDB chain.StorageType
pkg github.com/drand/drand/chain, const MemDB = "memdb"
pkg github.com/drand/drand/chain, const MemDB chain.StorageType
pkg github.com/drand/drand/chain, const PostgreSQL = "postgres"
pkg github.com/drand/drand/chain, const PostgreSQL chain.StorageType
pkg github.com/drand/drand/chain, const TimeOfRoundErrorValue = 9223371968135299071
pkg github.com/drand/drand/chain, const TimeOfRoundErrorValue int64
pkg github.com/drand/drand/chain, func BytesToRound([]uint8) uint64
pkg github.com/drand/drand/chain, func CurrentRound(int64, time.Duration, int64) uint64
pkg github.com/drand/drand/chain, func GenesisBeacon([]uint8) *chain.Beacon
pkg github.com/drand/drand/chain, func InfoFromJSON(io.Reader) (*chain.Info, error)
pkg github.com/drand/drand/chain, func InfoFromProto(*drand.ChainInfoPacket) (*chain.Info, error)
pkg github.com/drand/drand/chain, func MetricsStorageType(chain.StorageType) int
pkg github.com/drand/drand/chain, func NewChainInfo(*key.Group) *chain.Info
pkg github.com/drand/drand/chain, func NextRound(int64, time.Duration, int64) (uint64, int64)
pkg github.com/drand/drand/chain, func PreviousRequiredFromContext(context.Context) bool
pkg github.com/drand/drand/chain, func RoundToBytes(uint64) []uint8
pkg github.com/drand/drand/chain, func SetPreviousRequiredOnContext(context.Context) context.Context
pkg github.com/drand/drand/chain, func TimeOfRound(time.Duration, int64, uint64) int64
pkg github.com/drand/drand/chain, method (*chain.Beacon) Equal(*chain.Beacon) bool
pkg github.com/drand/drand/chain, method (*chain.Beacon) GetPreviousSignature() []uint8
pkg github.com/drand/drand/chain, method (*chain.Beacon) GetRound() uint64
pkg github.com/drand/drand/chain, method (*chain.Beacon) GetSignature() []uint8
pkg github.com/drand/drand/chain, method (*chain.Beacon) Marshal() ([]uint8, error)
pkg github.com/drand/drand/chain, method (*chain.Beacon) Randomness() []uint8
pkg github.com/drand/drand/chain, method (*chain.Beacon) String() string
pkg github.com/drand/drand/chain, method (*chain.Beacon) Unmarshal([]uint8) error
pkg github.com/drand/drand/chain, method (*chain.Info) Equal(*chain.Info) bool
pkg github.com/drand/drand/chain, method (*chain.Info) GetSchemeName() string
pkg github.com/drand/drand/chain, method (*chain.Info) Hash() []uint8
pkg github.com/drand/drand/chain, method (*chain.Info) HashString() string
pkg github.com/drand/drand/chain, method (*chain.Info) ToJSON(io.Writer, *common.Metadata) error
pkg github.com/drand/drand/chain, method (*chain.Info) ToProto(*common.Metadata) *drand.ChainInfoPacket
pkg github.com/drand/drand/chain, type Beacon struct
pkg github.com/drand/drand/chain, type Beacon struct, PreviousSig []uint8
pkg github.com/drand/drand/chain, type Beacon struct, Round uint64
pkg github.com/drand/drand/chain, type Beacon struct, Signature []uint8
pkg github.com/drand/drand/chain, type Cursor interface { First, Last, Next, Seek }
pkg github.com/drand/drand/chain, type Cursor interface, First(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain, type Cursor interface, Last(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain, type Cursor interface, Next(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain, type Cursor interface, Seek(context.Context, uint64) (*chain.Beacon, error)
pkg github.com/drand/drand/chain, type Info struct
pkg github.com/drand/drand/chain, type Info struct, GenesisSeed []uint8
pkg github.com/drand/drand/chain, type Info struct, GenesisTime int64
pkg github.com/drand/drand/chain, type Info struct, ID string
pkg github.com/drand/drand/chain, type Info struct, Period time.Duration
pkg github.com/drand/drand/chain, type Info struct, PublicKey kyber.Point
pkg github.com/drand/drand/chain, type Info struct, Scheme string
pkg github.com/drand/drand/chain, type StorageType string
pkg github.com/drand/drand/chain, type Store interface { Close, Cursor, Del, Get, Last, Len, Put, SaveTo }
pkg github.com/drand/drand/chain, type Store interface, Close(context.Context) error
pkg github.com/drand/drand/chain, type Store interface, Cursor(context.Context, func(context.Context, chain.Cursor) error) error
pkg github.com/drand/drand/chain, type Store interface, Del(context.Context, uint64) error
pkg github.com/drand/drand/chain, type Store interface, Get(context.Context, uint64) (*chain.Beacon, error)
pkg github.com/drand/drand/chain, type Store interface, Last(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain, type Store interface, Len(context.Context) (int, error)
pkg github.com/drand/drand/chain, type Store interface, Put(context.Context, *chain.Beacon) error
pkg github.com/drand/drand/chain, type Store interface, SaveTo(context.Context, io.Writer) error
pkg github.com/drand/drand/chain/beacon, const CallbackWorkerQueue = 100
pkg github.com/drand/drand/chain/beacon, const CallbackWorkerQueue ideal-int
pkg github.com/drand/drand/chain/beacon, const MaxCatchupBuffer = 1000
pkg github.com/drand/drand/chain/beacon, const MaxCatchupBuffer ideal-int
pkg github.com/drand/drand/chain/beacon, const MaxPartialsPerNode = 100
pkg github.com/drand/drand/chain/beacon, const MaxPartialsPerNode ideal-int
pkg github.com/drand/drand/chain/beacon, func NewCallbackStore(log.Logger, chain.Store) beacon.CallbackStore
pkg github.com/drand/drand/chain/beacon, func NewHandler(net.ProtocolClient, chain.Store, *beacon.Config, log.Logger, common.Version) (*beacon.Handler, error)
pkg github.com/drand/drand/chain/beacon, func NewRequestInfo(uint64, []net.Peer) beacon.RequestInfo
pkg github.com/drand/drand/chain/beacon, func NewSchemeStore(chain.Store, *crypto.Scheme) (chain.Store, error)
pkg github.com/drand/drand/chain/beacon, func NewSyncManager(*beacon.SyncConfig) (*beacon.SyncManager, error)
pkg github.com/drand/drand/chain/beacon, func SyncChain(log.Logger, beacon.CallbackStore, beacon.SyncRequest, beacon.SyncStream) error
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) AddCallback(string, beacon.CallbackFunc)
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Catchup()
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) CorrectChain(context.Context, []uint64, []net.Peer, func(uint64, uint64)) error
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) GetConfg() *beacon.Config
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) IsRunning() bool
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) IsServing() bool
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) IsStarted() bool
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) IsStopped() bool
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Lock()
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) ProcessPartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) RemoveCallback(string)
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Reset()
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Start() error
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Stop()
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) StopAt(int64) error
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Store() beacon.CallbackStore
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Transition(*key.Group) error
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) TransitionNewGroup(*key.Share, *key.Group)
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) TryLock() bool
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) Unlock()
pkg github.com/drand/drand/chain/beacon, method (*beacon.Handler) ValidateChain(context.Context, uint64, func(uint64, uint64)) ([]uint64, error)
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) CheckPastBeacons(context.Context, uint64, func(uint64, uint64)) ([]uint64, error)
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) CorrectPastBeacons(context.Context, []uint64, []net.Peer, func(uint64, uint64)) error
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) ReSync(context.Context, uint64, uint64, []net.Peer) error
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) Run()
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) SendSyncRequest(uint64, []net.Peer)
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) Stop()
pkg github.com/drand/drand/chain/beacon, method (*beacon.SyncManager) Sync(context.Context, beacon.RequestInfo) error
pkg github.com/drand/drand/chain/beacon, type CallbackFunc func(*chain.Beacon, bool)
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface { AddCallback, Close, Cursor, Del, Get, Last, Len, Put, RemoveCallback, SaveTo }
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, AddCallback(string, beacon.CallbackFunc)
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Close(context.Context) error
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Cursor(context.Context, func(context.Context, chain.Cursor) error) error
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Del(context.Context, uint64) error
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Get(context.Context, uint64) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Last(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Len(context.Context) (int, error)
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, Put(context.Context, *chain.Beacon) error
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, RemoveCallback(string)
pkg github.com/drand/drand/chain/beacon, type CallbackStore interface, SaveTo(context.Context, io.Writer) error
pkg github.com/drand/drand/chain/beacon, type Config struct
pkg github.com/drand/drand/chain/beacon, type Config struct, Clock clockwork.Clock
pkg github.com/drand/drand/chain/beacon, type Config struct, Group *key.Group
pkg github.com/drand/drand/chain/beacon, type Config struct, Public *key.Node
pkg github.com/drand/drand/chain/beacon, type Config struct, Share *key.Share
pkg github.com/drand/drand/chain/beacon, type Handler struct
pkg github.com/drand/drand/chain/beacon, type Handler struct, embedded sync.Mutex
pkg github.com/drand/drand/chain/beacon, type RequestInfo struct
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, BoltdbStore chain.Store
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, Client net.ProtocolClient
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, Clock clockwork.Clock
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, Info *chain.Info
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, Log log.Logger
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, NodeAddr string
pkg github.com/drand/drand/chain/beacon, type SyncConfig struct, Store chain.Store
pkg github.com/drand/drand/chain/beacon, type SyncManager struct
pkg github.com/drand/drand/chain/beacon, type SyncRequest interface { GetFromRound, GetMetadata }
pkg github.com/drand/drand/chain/beacon, type SyncRequest interface, GetFromRound() uint64
pkg github.com/drand/drand/chain/beacon, type SyncRequest interface, GetMetadata() *common.Metadata
pkg github.com/drand/drand/chain/beacon, type SyncStream interface { Context, Send }
pkg github.com/drand/drand/chain/beacon, type SyncStream interface, Context() context.Context
pkg github.com/drand/drand/chain/beacon, type SyncStream interface, Send(*drand.BeaconPacket) error
pkg github.com/drand/drand/chain/beacon, var ErrBeaconAlreadyStored error
pkg github.com/drand/drand/chain/beacon, var ErrCallbackReplaced error
pkg github.com/drand/drand/chain/beacon, var ErrFailedAll error
pkg github.com/drand/drand/chain/beacon, var MaxSyncWaitTime time.Duration
pkg github.com/drand/drand/chain/boltdb, const BoltFileName = "drand.db"
pkg github.com/drand/drand/chain/boltdb, const BoltFileName ideal-string
pkg github.com/drand/drand/chain/boltdb, const BoltStoreOpenPerm = 432
pkg github.com/drand/drand/chain/boltdb, const BoltStoreOpenPerm ideal-int
pkg github.com/drand/drand/chain/boltdb, func IsATest(context.Context) context.Context
pkg github.com/drand/drand/chain/boltdb, func NewBoltStore(context.Context, log.Logger, string, *bbolt.Options) (chain.Store, error)
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Close(context.Context) error
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Cursor(context.Context, func(context.Context, chain.Cursor) error) error
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Del(context.Context, uint64) error
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Get(context.Context, uint64) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Last(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Len(context.Context) (int, error)
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Lock()
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Put(context.Context, *chain.Beacon) error
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) SaveTo(context.Context, io.Writer) error
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) TryLock() bool
pkg github.com/drand/drand/chain/boltdb, method (*boltdb.BoltStore) Unlock()
pkg github.com/drand/drand/chain/boltdb, type BoltStore struct
pkg github.com/drand/drand/chain/boltdb, type BoltStore struct, embedded sync.Mutex
pkg github.com/drand/drand/chain/errors, var ErrNoBeaconSaved error
pkg github.com/drand/drand/chain/errors, var ErrNoBeaconStored error
pkg github.com/drand/drand/chain/memdb, func NewStore(int) *memdb.Store
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Close(context.Context) error
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Cursor(context.Context, func(context.Context, chain.Cursor) error) error
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Del(context.Context, uint64) error
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Get(context.Context, uint64) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Last(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Len(context.Context) (int, error)
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) Put(context.Context, *chain.Beacon) error
pkg github.com/drand/drand/chain/memdb, method (*memdb.Store) SaveTo(context.Context, io.Writer) error
pkg github.com/drand/drand/chain/memdb, type Store struct
pkg github.com/drand/drand/chain/postgresdb/database, func ConfigFromDSN(string) (database.Config, error)
pkg github.com/drand/drand/chain/postgresdb/database, func Open(context.Context, database.Config) (*sqlx.DB, error)
pkg github.com/drand/drand/chain/postgresdb/database, func StatusCheck(context.Context, *sqlx.DB) error
pkg github.com/drand/drand/chain/postgresdb/database, func WithinTran(log.Logger, *sqlx.DB, func(*sqlx.Tx) error) error
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, ConnectTimeout int
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, DisableTLS bool
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, Host string
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, MaxIdleConns int
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, MaxOpenConns int
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, Name string
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, Password string
pkg github.com/drand/drand/chain/postgresdb/database, type Config struct, User string
pkg github.com/drand/drand/chain/postgresdb/pgdb, func NewStore(context.Context, log.Logger, *sqlx.DB, string) (*pgdb.Store, error)
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) AddBeaconID(context.Context, string) (int, error)
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) AddFK(context.Context) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) BatchPut(context.Context, []chain.Beacon) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Close(context.Context) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Cursor(context.Context, func(context.Context, chain.Cursor) error) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Del(context.Context, uint64) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) DropFK(context.Context) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Get(context.Context, uint64) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Last(context.Context) (*chain.Beacon, error)
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Len(context.Context) (int, error)
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) Put(context.Context, *chain.Beacon) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, method (*pgdb.Store) SaveTo(context.Context, io.Writer) error
pkg github.com/drand/drand/chain/postgresdb/pgdb, type Store struct
pkg github.com/drand/drand/chain/postgresdb/schema, func Migrate(context.Context, *sqlx.DB) error
pkg github.com/drand/drand/client, func EmptyClientWithInfo(*chain.Info) client.Client
pkg github.com/drand/drand/client, func From(...client.Client) client.Option
pkg github.com/drand/drand/client, func Insecurely() client.Option
pkg github.com/drand/drand/client, func New(...client.Option) (client.Client, error)
pkg github.com/drand/drand/client, func NewCachingClient(client.Client, client.Cache) (client.Client, error)
pkg github.com/drand/drand/client, func PollingWatcher(context.Context, client.Client, *chain.Info, log.Logger) <-chan client.Result
pkg github.com/drand/drand/client, func WithAutoWatch() client.Option
pkg github.com/drand/drand/client, func WithAutoWatchRetry(time.Duration) client.Option
pkg github.com/drand/drand/client, func WithCacheSize(int) client.Option
pkg github.com/drand/drand/client, func WithChainHash([]uint8) client.Option
pkg github.com/drand/drand/client, func WithChainInfo(*chain.Info) client.Option
pkg github.com/drand/drand/client, func WithFullChainVerification() client.Option
pkg github.com/drand/drand/client, func WithLogger(log.Logger) client.Option
pkg github.com/drand/drand/client, func WithPrometheus(prometheus.Registerer) client.Option
pkg github.com/drand/drand/client, func WithVerifiedResult(client.Result) client.Option
pkg github.com/drand/drand/client, func WithWatcher(client.WatcherCtor) client.Option
pkg github.com/drand/drand/client, func Wrap([]client.Client, ...client.Option) (client.Client, error)
pkg github.com/drand/drand/client, method (*client.RandomData) Randomness() []uint8
pkg github.com/drand/drand/client, method (*client.RandomData) Round() uint64
pkg github.com/drand/drand/client, method (*client.RandomData) Signature() []uint8
pkg github.com/drand/drand/client, type Cache interface { Add, TryGet }
pkg github.com/drand/drand/client, type Cache interface, Add(uint64, client.Result)
pkg github.com/drand/drand/client, type Cache interface, TryGet(uint64) client.Result
pkg github.com/drand/drand/client, type Client interface { Close, Get, Info, RoundAt, Watch }
pkg github.com/drand/drand/client, type Client interface, Close() error
pkg github.com/drand/drand/client, type Client interface, Get(context.Context, uint64) (client.Result, error)
pkg github.com/drand/drand/client, type Client interface, Info(context.Context) (*chain.Info, error)
pkg github.com/drand/drand/client, type Client interface, RoundAt(time.Time) uint64
pkg github.com/drand/drand/client, type Client interface, Watch(context.Context) <-chan client.Result
pkg github.com/drand/drand/client, type LoggingClient interface { SetLog }
pkg github.com/drand/drand/client, type LoggingClient interface, SetLog(log.Logger)
pkg github.com/drand/drand/client, type Option func(*client.clientConfig) error
pkg github.com/drand/drand/client, type RandomData struct
pkg github.com/drand/drand/client, type RandomData struct, PreviousSignature []uint8
pkg github.com/drand/drand/client, type RandomData struct, Random []uint8
pkg github.com/drand/drand/client, type RandomData struct, Rnd uint64
pkg github.com/drand/drand/client, type RandomData struct, Sig []uint8
pkg github.com/drand/drand/client, type Result interface { Randomness, Round, Signature }
pkg github.com/drand/drand/client, type Result interface, Randomness() []uint8
pkg github.com/drand/drand/client, type Result interface, Round() uint64
pkg github.com/drand/drand/client, type Result interface, Signature() []uint8
pkg github.com/drand/drand/client, type Watcher interface { Watch }
pkg github.com/drand/drand/client, type Watcher interface, Watch(context.Context) <-chan client.Result
pkg github.com/drand/drand/client, type WatcherCtor func(*chain.Info, client.Cache) (client.Watcher, error)
pkg github.com/drand/drand/client/grpc, func New(string, string, bool, []uint8) (client.Client, error)
pkg github.com/drand/drand/client/http, const HTTPHeartbeatInterval = 10000000000
pkg github.com/drand/drand/client/http, const HTTPHeartbeatInterval time.Duration
pkg github.com/drand/drand/client/http, func ForURLs([]string, []uint8) []client.Client
pkg github.com/drand/drand/client/http, func IsServerReady(string) error
pkg github.com/drand/drand/client/http, func MeasureHeartbeats(context.Context, []client.Client) *http.HealthMetrics
pkg github.com/drand/drand/client/http, func New(string, []uint8, http.RoundTripper) (client.Client, error)
pkg github.com/drand/drand/client/http, func NewWithInfo(string, *chain.Info, http.RoundTripper) (client.Client, error)
pkg github.com/drand/drand/client/http, func Ping(context.Context, string) error
pkg github.com/drand/drand/client/http, type HealthMetrics struct
pkg github.com/drand/drand/client/test/cache, func NewMapCache() *cache.MapCache
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) Add(uint64, client.Result)
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) Lock()
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) RLock()
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) RLocker() sync.Locker
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) RUnlock()
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) TryGet(uint64) client.Result
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) TryLock() bool
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) TryRLock() bool
pkg github.com/drand/drand/client/test/cache, method (*cache.MapCache) Unlock()
pkg github.com/drand/drand/client/test/cache, type MapCache struct
pkg github.com/drand/drand/client/test/cache, type MapCache struct, embedded sync.RWMutex
pkg github.com/drand/drand/client/test/http/mock, func NewMockHTTPPublicServer(*testing.T, bool, *crypto.Scheme) (string, *chain.Info, context.CancelFunc, func(bool))
pkg github.com/drand/drand/client/test/result/mock, func NewMockResult(uint64) mock.Result
pkg github.com/drand/drand/client/test/result/mock, func VerifiableResults(int, *crypto.Scheme) (*chain.Info, []mock.Result)
pkg github.com/drand/drand/client/test/result/mock, method (*mock.Result) AssertValid(*testing.T)
pkg github.com/drand/drand/client/test/result/mock, method (*mock.Result) PreviousSignature() []uint8
pkg github.com/drand/drand/client/test/result/mock, method (*mock.Result) Randomness() []uint8
pkg github.com/drand/drand/client/test/result/mock, method (*mock.Result) Round() uint64
pkg github.com/drand/drand/client/test/result/mock, method (*mock.Result) Signature() []uint8
pkg github.com/drand/drand/client/test/result/mock, type Result struct
pkg github.com/drand/drand/client/test/result/mock, type Result struct, PSig []uint8
pkg github.com/drand/drand/client/test/result/mock, type Result struct, Rand []uint8
pkg github.com/drand/drand/client/test/result/mock, type Result struct, Rnd uint64
pkg github.com/drand/drand/client/test/result/mock, type Result struct, Sig []uint8
pkg github.com/drand/drand/cmd/client, func Client(*cli.Context) error
pkg github.com/drand/drand/cmd/client, func Watch(client.Watcher) error
pkg github.com/drand/drand/cmd/client/lib, func Create(*cli.Context, bool, ...client.Option) (client.Client, error)
pkg github.com/drand/drand/cmd/client/lib, var CertFlag *cli.StringFlag
pkg github.com/drand/drand/cmd/client/lib, var ClientFlags []cli.Flag
pkg github.com/drand/drand/cmd/client/lib, var GRPCConnectFlag *cli.StringFlag
pkg github.com/drand/drand/cmd/client/lib, var GroupConfFlag *cli.PathFlag
pkg github.com/drand/drand/cmd/client/lib, var GroupConfListFlag *cli.StringSliceFlag
pkg github.com/drand/drand/cmd/client/lib, var HashFlag *cli.StringFlag
pkg github.com/drand/drand/cmd/client/lib, var HashListFlag *cli.StringSliceFlag
pkg github.com/drand/drand/cmd/client/lib, var InsecureFlag *cli.BoolFlag
pkg github.com/drand/drand/cmd/client/lib, var JSONFlag *cli.BoolFlag
pkg github.com/drand/drand/cmd/client/lib, var PortFlag *cli.StringFlag
pkg github.com/drand/drand/cmd/client/lib, var RelayFlag *cli.StringSliceFlag
pkg github.com/drand/drand/cmd/client/lib, var URLFlag *cli.StringSliceFlag
pkg github.com/drand/drand/cmd/drand-cli, func CLI() *cli.App
pkg github.com/drand/drand/cmd/drand-cli, var SetVersionPrinter sync.Once
pkg github.com/drand/drand/cmd/relay, func Relay(*cli.Context) error
pkg github.com/drand/drand/common, const DefaultBeaconID = "default"
pkg github.com/drand/drand/common, const DefaultBeaconID ideal-string
pkg github.com/drand/drand/common, const DefaultChainHash = "default"
pkg github.com/drand/drand/common, const DefaultChainHash ideal-string
pkg github.com/drand/drand/common, const LogsToSkip = 300
pkg github.com/drand/drand/common, const LogsToSkip ideal-int
pkg github.com/drand/drand/common, const MultiBeaconFolder = "multibeacon"
pkg github.com/drand/drand/common, const MultiBeaconFolder ideal-string
pkg github.com/drand/drand/common, func CompareBeaconIDs(string, string) bool
pkg github.com/drand/drand/common, func GetAppVersion() common.Version
pkg github.com/drand/drand/common, func GetCanonicalBeaconID(string) string
pkg github.com/drand/drand/common, func IsDefaultBeaconID(string) bool
pkg github.com/drand/drand/common, method (common.Version) IsCompatible(common.Version) bool
pkg github.com/drand/drand/common, method (common.Version) String() string
pkg github.com/drand/drand/common, method (common.Version) ToProto() *common.NodeVersion
pkg github.com/drand/drand/common, type Version struct
pkg github.com/drand/drand/common, type Version struct, Major uint32
pkg github.com/drand/drand/common, type Version struct, Minor uint32
pkg github.com/drand/drand/common, type Version struct, Patch uint32
pkg github.com/drand/drand/common, type Version struct, Prerelease string
pkg github.com/drand/drand/common, var BUILDDATE string
pkg github.com/drand/drand/common, var COMMIT string
pkg github.com/drand/drand/common, var ErrInvalidChainHash error
pkg github.com/drand/drand/common, var ErrNotPartOfGroup error
pkg github.com/drand/drand/common, var ErrPeerNotFound error
pkg github.com/drand/drand/core, const BeaconInited = 1
pkg github.com/drand/drand/core, const BeaconInited core.BeaconStatus
pkg github.com/drand/drand/core, const BeaconNotInited = 0
pkg github.com/drand/drand/core, const BeaconNotInited core.BeaconStatus
pkg github.com/drand/drand/core, const DefaultBeaconPeriod = 60000000000
pkg github.com/drand/drand/core, const DefaultBeaconPeriod time.Duration
pkg github.com/drand/drand/core, const DefaultConfigFolderName = ".drand"
pkg github.com/drand/drand/core, const DefaultConfigFolderName ideal-string
pkg github.com/drand/drand/core, const DefaultControlPort = "8888"
pkg github.com/drand/drand/core, const DefaultControlPort ideal-string
pkg github.com/drand/drand/core, const DefaultDBFolder = "db"
pkg github.com/drand/drand/core, const DefaultDBFolder ideal-string
pkg github.com/drand/drand/core, const DefaultDKGTimeout = 10000000000
pkg github.com/drand/drand/core, const DefaultDKGTimeout time.Duration
pkg github.com/drand/drand/core, const DefaultGenesisOffset = 1000000000
pkg github.com/drand/drand/core, const DefaultGenesisOffset time.Duration
pkg github.com/drand/drand/core, const DkgInProgress = 1
pkg github.com/drand/drand/core, const DkgInProgress core.DkgStatus
pkg github.com/drand/drand/core, const DkgNotStarted = 2
pkg github.com/drand/drand/core, const DkgNotStarted core.DkgStatus
pkg github.com/drand/drand/core, const DkgReady = 0
pkg github.com/drand/drand/core, const DkgReady core.DkgStatus
pkg github.com/drand/drand/core, const InProgressDesc = "In progress"
pkg github.com/drand/drand/core, const InProgressDesc ideal-string
pkg github.com/drand/drand/core, const NotStartedDesc = "Not started"
pkg github.com/drand/drand/core, const NotStartedDesc ideal-string
pkg github.com/drand/drand/core, const ReshareInProgress = 1
pkg github.com/drand/drand/core, const ReshareInProgress core.ReshareStatus
pkg github.com/drand/drand/core, const ReshareNotInProgress = 0
pkg github.com/drand/drand/core, const ReshareNotInProgress core.ReshareStatus
pkg github.com/drand/drand/core, const UnknownDesc = "Unknown"
pkg github.com/drand/drand/core, const UnknownDesc ideal-string
pkg github.com/drand/drand/core, func DefaultConfigFolder() string
pkg github.com/drand/drand/core, func GetBeaconDescription(core.BeaconStatus) string
pkg github.com/drand/drand/core, func GetDkgStatusDescription(core.DkgStatus) string
pkg github.com/drand/drand/core, func GetReshareStatusDescription(core.ReshareStatus) string
pkg github.com/drand/drand/core, func NewBeaconProcess(log.Logger, key.Store, string, *core.Config, *net.PrivateGateway, *net.PublicGateway) (*core.BeaconProcess, error)
pkg github.com/drand/drand/core, func NewConfig(...core.ConfigOption) *core.Config
pkg github.com/drand/drand/core, func NewDrandDaemon(*core.Config) (*core.DrandDaemon, error)
pkg github.com/drand/drand/core, func NewGrpcClient([]uint8, ...grpc.DialOption) *core.Client
pkg github.com/drand/drand/core, func NewGrpcClientFromCert([]uint8, *net.CertManager, ...grpc.DialOption) *core.Client
pkg github.com/drand/drand/core, func Proxy(drand.PublicServer) client.Client
pkg github.com/drand/drand/core, func StatusResponseToString(*drand.StatusResponse) string
pkg github.com/drand/drand/core, func WithBoltOptions(*bbolt.Options) core.ConfigOption
pkg github.com/drand/drand/core, func WithCallOption(...grpc.CallOption) core.ConfigOption
pkg github.com/drand/drand/core, func WithConfigFolder(string) core.ConfigOption
pkg github.com/drand/drand/core, func WithControlPort(string) core.ConfigOption
pkg github.com/drand/drand/core, func WithDBStorageEngine(chain.StorageType) core.ConfigOption
pkg github.com/drand/drand/core, func WithDkgTimeout(time.Duration) core.ConfigOption
pkg github.com/drand/drand/core, func WithGrpcOptions(...grpc.DialOption) core.ConfigOption
pkg github.com/drand/drand/core, func WithInsecure() core.ConfigOption
pkg github.com/drand/drand/core, func WithLogLevel(int, bool) core.ConfigOption
pkg github.com/drand/drand/core, func WithMemDBSize(int) core.ConfigOption
pkg github.com/drand/drand/core, func WithPgDSN(string) core.ConfigOption
pkg github.com/drand/drand/core, func WithPrivateListenAddress(string) core.ConfigOption
pkg github.com/drand/drand/core, func WithPublicListenAddress(string) core.ConfigOption
pkg github.com/drand/drand/core, func WithTLS(string, string) core.ConfigOption
pkg github.com/drand/drand/core, func WithTrustedCerts(...string) core.ConfigOption
pkg github.com/drand/drand/core, func WithVersion(string) core.ConfigOption
pkg github.com/drand/drand/core, method (*core.BeaconProcess) BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) ListBeaconIDs(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) Load() (bool, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) MetricsHandlerForPeer(string) (http.Handler, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/core, method (*core.BeaconProcess) PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) StartBeacon(bool) error
pkg github.com/drand/drand/core, method (*core.BeaconProcess) StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/core, method (*core.BeaconProcess) StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/core, method (*core.BeaconProcess) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) Stop(context.Context)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) StopBeacon()
pkg github.com/drand/drand/core, method (*core.BeaconProcess) SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/core, method (*core.BeaconProcess) WaitDKG() (*key.Group, error)
pkg github.com/drand/drand/core, method (*core.BeaconProcess) WaitExit() chan bool
pkg github.com/drand/drand/core, method (*core.Client) ChainInfo(net.Peer) (*chain.Info, error)
pkg github.com/drand/drand/core, method (*core.Config) BoltOptions() *bbolt.Options
pkg github.com/drand/drand/core, method (*core.Config) Certs() *net.CertManager
pkg github.com/drand/drand/core, method (*core.Config) ConfigFolder() string
pkg github.com/drand/drand/core, method (*core.Config) ConfigFolderMB() string
pkg github.com/drand/drand/core, method (*core.Config) ControlPort() string
pkg github.com/drand/drand/core, method (*core.Config) DBFolder(string) string
pkg github.com/drand/drand/core, method (*core.Config) Logger() log.Logger
pkg github.com/drand/drand/core, method (*core.Config) PgDSN() string
pkg github.com/drand/drand/core, method (*core.Config) PrivateListenAddress(string) string
pkg github.com/drand/drand/core, method (*core.Config) PublicListenAddress(string) string
pkg github.com/drand/drand/core, method (*core.Config) Version() string
pkg github.com/drand/drand/core, method (*core.DrandDaemon) AddBeaconHandler(string, *core.BeaconProcess)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) InstantiateBeaconProcess(string, key.Store) (*core.BeaconProcess, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) LoadBeacon(context.Context, *drand.LoadBeaconRequest) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) LoadBeaconFromDisk(string) (*core.BeaconProcess, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) LoadBeaconFromStore(string, key.Store) (*core.BeaconProcess, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) LoadBeaconsFromDisk(string, bool, string) error
pkg github.com/drand/drand/core, method (*core.DrandDaemon) NodeVersionStreamValidator(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error
pkg github.com/drand/drand/core, method (*core.DrandDaemon) NodeVersionValidator(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/core, method (*core.DrandDaemon) PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) RemoveBeaconHandler(string, *core.BeaconProcess)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) RemoveBeaconProcess(string, *core.BeaconProcess)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) Share(context.Context, *drand.ShareRequest) (*drand.ShareResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) Shutdown(context.Context, *drand.ShutdownRequest) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/core, method (*core.DrandDaemon) StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/core, method (*core.DrandDaemon) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) Stop(context.Context)
pkg github.com/drand/drand/core, method (*core.DrandDaemon) SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/core, method (*core.DrandDaemon) WaitExit() chan bool
pkg github.com/drand/drand/core, type BeaconProcess struct
pkg github.com/drand/drand/core, type BeaconStatus uint32
pkg github.com/drand/drand/core, type Broadcast interface { BroadcastDKG, IncomingDeal, IncomingJustification, IncomingResponse, PushDeals, PushJustifications, PushResponses, Stop }
pkg github.com/drand/drand/core, type Broadcast interface, BroadcastDKG(context.Context, *drand.DKGPacket) error
pkg github.com/drand/drand/core, type Broadcast interface, IncomingDeal() <-chan dkg.DealBundle
pkg github.com/drand/drand/core, type Broadcast interface, IncomingJustification() <-chan dkg.JustificationBundle
pkg github.com/drand/drand/core, type Broadcast interface, IncomingResponse() <-chan dkg.ResponseBundle
pkg github.com/drand/drand/core, type Broadcast interface, PushDeals(*dkg.DealBundle)
pkg github.com/drand/drand/core, type Broadcast interface, PushJustifications(*dkg.JustificationBundle)
pkg github.com/drand/drand/core, type Broadcast interface, PushResponses(*dkg.ResponseBundle)
pkg github.com/drand/drand/core, type Broadcast interface, Stop()
pkg github.com/drand/drand/core, type Client struct
pkg github.com/drand/drand/core, type Config struct
pkg github.com/drand/drand/core, type ConfigOption func(*core.Config)
pkg github.com/drand/drand/core, type DkgStatus uint32
pkg github.com/drand/drand/core, type DrandDaemon struct
pkg github.com/drand/drand/core, type MetadataGetter interface { GetMetadata }
pkg github.com/drand/drand/core, type MetadataGetter interface, GetMetadata() *common.Metadata
pkg github.com/drand/drand/core, type ReshareStatus uint32
pkg github.com/drand/drand/core, var DefaultResharingOffset time.Duration
pkg github.com/drand/drand/core, var MaxWaitPrepareDKG time.Duration
pkg github.com/drand/drand/core/migration, func CheckSBFolderStructure(string) bool
pkg github.com/drand/drand/core/migration, func MigrateSBFolderStructure(string) error
pkg github.com/drand/drand/crypto, const DefaultSchemeID = "pedersen-bls-chained"
pkg github.com/drand/drand/crypto, const DefaultSchemeID ideal-string
pkg github.com/drand/drand/crypto, const ShortSigSchemeID = "bls-unchained-on-g1"
pkg github.com/drand/drand/crypto, const ShortSigSchemeID ideal-string
pkg github.com/drand/drand/crypto, const SigsOnG1ID = "bls-unchained-g1-rfc9380"
pkg github.com/drand/drand/crypto, const SigsOnG1ID ideal-string
pkg github.com/drand/drand/crypto, const UnchainedSchemeID = "pedersen-bls-unchained"
pkg github.com/drand/drand/crypto, const UnchainedSchemeID ideal-string
pkg github.com/drand/drand/crypto, func GetSchemeByIDWithDefault(string) (*crypto.Scheme, error)
pkg github.com/drand/drand/crypto, func GetSchemeFromEnv() (*crypto.Scheme, error)
pkg github.com/drand/drand/crypto, func ListSchemes() []string
pkg github.com/drand/drand/crypto, func NewPedersenBLSChained() *crypto.Scheme
pkg github.com/drand/drand/crypto, func NewPedersenBLSUnchained() *crypto.Scheme
pkg github.com/drand/drand/crypto, func NewPedersenBLSUnchainedG1() *crypto.Scheme
pkg github.com/drand/drand/crypto, func NewPedersenBLSUnchainedSwapped() *crypto.Scheme
pkg github.com/drand/drand/crypto, func RandomnessFromSignature([]uint8) []uint8
pkg github.com/drand/drand/crypto, func SchemeFromName(string) (*crypto.Scheme, error)
pkg github.com/drand/drand/crypto, method (*crypto.Scheme) String() string
pkg github.com/drand/drand/crypto, method (*crypto.Scheme) VerifyBeacon(crypto.signedBeacon, kyber.Point) error
pkg github.com/drand/drand/crypto, type Scheme struct
pkg github.com/drand/drand/crypto, type Scheme struct, AuthScheme sign.Scheme
pkg github.com/drand/drand/crypto, type Scheme struct, DKGAuthScheme sign.Scheme
pkg github.com/drand/drand/crypto, type Scheme struct, DigestBeacon func(crypto.hashableBeacon) []uint8
pkg github.com/drand/drand/crypto, type Scheme struct, IdentityHash func() hash.Hash
pkg github.com/drand/drand/crypto, type Scheme struct, KeyGroup kyber.Group
pkg github.com/drand/drand/crypto, type Scheme struct, Name string
pkg github.com/drand/drand/crypto, type Scheme struct, SigGroup kyber.Group
pkg github.com/drand/drand/crypto, type Scheme struct, ThresholdScheme sign.ThresholdScheme
pkg github.com/drand/drand/crypto/vault, func NewVault(*key.Group, *key.Share, *crypto.Scheme) *vault.Vault
pkg github.com/drand/drand/crypto/vault, method (*vault.Vault) GetGroup() *key.Group
pkg github.com/drand/drand/crypto/vault, method (*vault.Vault) GetInfo() *chain.Info
pkg github.com/drand/drand/crypto/vault, method (*vault.Vault) GetPub() *share.PubPoly
pkg github.com/drand/drand/crypto/vault, method (*vault.Vault) Index() int
pkg github.com/drand/drand/crypto/vault, method (*vault.Vault) SetInfo(*key.Group, *key.Share)
pkg github.com/drand/drand/crypto/vault, method (*vault.Vault) SignPartial([]uint8) ([]uint8, error)
pkg github.com/drand/drand/crypto/vault, method (vault.Vault) String() string
pkg github.com/drand/drand/crypto/vault, method (vault.Vault) VerifyBeacon(crypto.signedBeacon, kyber.Point) error
pkg github.com/drand/drand/crypto/vault, type CryptoSafe interface { SignPartial }
pkg github.com/drand/drand/crypto/vault, type CryptoSafe interface, SignPartial([]uint8) ([]uint8, error)
pkg github.com/drand/drand/crypto/vault, type Vault struct
pkg github.com/drand/drand/crypto/vault, type Vault struct, embedded *crypto.Scheme
pkg github.com/drand/drand/demo/cfg, func BootContainer() func()
pkg github.com/drand/drand/demo/cfg, func ComputePgDSN(chain.StorageType) func() string
pkg github.com/drand/drand/demo/cfg, type Config struct
pkg github.com/drand/drand/demo/cfg, type Config struct, BasePath string
pkg github.com/drand/drand/demo/cfg, type Config struct, BeaconID string
pkg github.com/drand/drand/demo/cfg, type Config struct, Binary string
pkg github.com/drand/drand/demo/cfg, type Config struct, CertFolder string
pkg github.com/drand/drand/demo/cfg, type Config struct, DBEngineType chain.StorageType
pkg github.com/drand/drand/demo/cfg, type Config struct, IsCandidate bool
pkg github.com/drand/drand/demo/cfg, type Config struct, MemDBSize int
pkg github.com/drand/drand/demo/cfg, type Config struct, N int
pkg github.com/drand/drand/demo/cfg, type Config struct, Offset int
pkg github.com/drand/drand/demo/cfg, type Config struct, Period string
pkg github.com/drand/drand/demo/cfg, type Config struct, PgDSN func() string
pkg github.com/drand/drand/demo/cfg, type Config struct, Scheme *crypto.Scheme
pkg github.com/drand/drand/demo/cfg, type Config struct, Thr int
pkg github.com/drand/drand/demo/cfg, type Config struct, WithCurl bool
pkg github.com/drand/drand/demo/cfg, type Config struct, WithTLS bool
pkg github.com/drand/drand/demo/lib, func NewOrchestrator(cfg.Config) *lib.Orchestrator
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) CheckCurrentBeacon(...int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) CheckNewBeacon(...int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) CreateResharingGroup(int, int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) PrintLogs()
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) RunDKG(time.Duration)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) RunResharing(string)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) SetupNewNodes(int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) Shutdown()
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) StartCurrentNodes(...int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) StartNewNodes()
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) StartNode(...int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) StopAllNodes(...int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) StopNodes(...int)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) UpdateBinary(string, uint, bool)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) UpdateGlobalBinary(string, bool)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) Wait(time.Duration)
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) WaitGenesis()
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) WaitPeriod()
pkg github.com/drand/drand/demo/lib, method (*lib.Orchestrator) WaitTransition()
pkg github.com/drand/drand/demo/lib, type Orchestrator struct
pkg github.com/drand/drand/demo/node, func NewLocalNode(int, string, cfg.Config) *node.LocalNode
pkg github.com/drand/drand/demo/node, func NewNode(int, cfg.Config) *node.NodeProc
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) ChainInfo(string) bool
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) CtrlAddr() string
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) GetBeacon(string, uint64) (*drand.PublicRandResponse, string)
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) GetGroup() *key.Group
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) Index() int
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) Ping() bool
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) PrintLog()
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) PrivateAddr() string
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) PublicAddr() string
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) RunDKG(int, int, time.Duration, bool, string, int) (*key.Group, error)
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) RunReshare(int, int, string, string, bool, string, int) *key.Group
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) Start(string, chain.StorageType, func() string, int) error
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) Stop()
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) WriteCertificate(string)
pkg github.com/drand/drand/demo/node, method (*node.LocalNode) WritePublic(string)
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) ChainInfo(string) bool
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) CtrlAddr() string
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) GetBeacon(string, uint64) (*drand.PublicRandResponse, string)
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) GetGroup() *key.Group
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) Index() int
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) Ping() bool
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) PrintLog()
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) PrivateAddr() string
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) PublicAddr() string
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) RunDKG(int, int, time.Duration, bool, string, int) (*key.Group, error)
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) RunReshare(int, int, string, string, bool, string, int) *key.Group
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) Start(string, chain.StorageType, func() string, int) error
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) Stop()
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) UpdateBinary(string, bool)
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) WriteCertificate(string)
pkg github.com/drand/drand/demo/node, method (*node.NodeProc) WritePublic(string)
pkg github.com/drand/drand/demo/node, type LocalNode struct
pkg github.com/drand/drand/demo/node, type Node interface { ChainInfo, CtrlAddr, GetBeacon, GetGroup, Index, Ping, PrintLog, PrivateAddr, PublicAddr, RunDKG, RunReshare, Start, Stop, WriteCertificate, WritePublic }
pkg github.com/drand/drand/demo/node, type Node interface, ChainInfo(string) bool
pkg github.com/drand/drand/demo/node, type Node interface, CtrlAddr() string
pkg github.com/drand/drand/demo/node, type Node interface, GetBeacon(string, uint64) (*drand.PublicRandResponse, string)
pkg github.com/drand/drand/demo/node, type Node interface, GetGroup() *key.Group
pkg github.com/drand/drand/demo/node, type Node interface, Index() int
pkg github.com/drand/drand/demo/node, type Node interface, Ping() bool
pkg github.com/drand/drand/demo/node, type Node interface, PrintLog()
pkg github.com/drand/drand/demo/node, type Node interface, PrivateAddr() string
pkg github.com/drand/drand/demo/node, type Node interface, PublicAddr() string
pkg github.com/drand/drand/demo/node, type Node interface, RunDKG(int, int, time.Duration, bool, string, int) (*key.Group, error)
pkg github.com/drand/drand/demo/node, type Node interface, RunReshare(int, int, string, string, bool, string, int) *key.Group
pkg github.com/drand/drand/demo/node, type Node interface, Start(string, chain.StorageType, func() string, int) error
pkg github.com/drand/drand/demo/node, type Node interface, Stop()
pkg github.com/drand/drand/demo/node, type Node interface, WriteCertificate(string)
pkg github.com/drand/drand/demo/node, type Node interface, WritePublic(string)
pkg github.com/drand/drand/demo/node, type NodeProc struct
pkg github.com/drand/drand/entropy, func GetRandom(io.Reader, uint32) ([]uint8, error)
pkg github.com/drand/drand/entropy, func NewScriptReader(string) *entropy.ScriptReader
pkg github.com/drand/drand/entropy, method (*entropy.ScriptReader) GetPath() string
pkg github.com/drand/drand/entropy, method (*entropy.ScriptReader) Read([]uint8) (int, error)
pkg github.com/drand/drand/entropy, type ScriptReader struct
pkg github.com/drand/drand/entropy, type ScriptReader struct, Path string
pkg github.com/drand/drand/fs, func CopyFile(string, string) error
pkg github.com/drand/drand/fs, func CopyFolder(string, string) error
pkg github.com/drand/drand/fs, func CreateSecureFile(string) (*os.File, error)
pkg github.com/drand/drand/fs, func CreateSecureFolder(string) string
pkg github.com/drand/drand/fs, func Exists(string) (bool, error)
pkg github.com/drand/drand/fs, func FileExists(string, string) bool
pkg github.com/drand/drand/fs, func Files(string) ([]string, error)
pkg github.com/drand/drand/fs, func FolderExists(string, string) bool
pkg github.com/drand/drand/fs, func Folders(string) ([]string, error)
pkg github.com/drand/drand/fs, func HomeFolder() string
pkg github.com/drand/drand/http, func New(context.Context, string, log.Logger) (*http.DrandHandler, error)
pkg github.com/drand/drand/http, method (*http.DrandHandler) ChainHashes(http.ResponseWriter, *http.Request)
pkg github.com/drand/drand/http, method (*http.DrandHandler) ChainInfo(http.ResponseWriter, *http.Request)
pkg github.com/drand/drand/http, method (*http.DrandHandler) GetHTTPHandler() http.Handler
pkg github.com/drand/drand/http, method (*http.DrandHandler) Health(http.ResponseWriter, *http.Request)
pkg github.com/drand/drand/http, method (*http.DrandHandler) LatestRand(http.ResponseWriter, *http.Request)
pkg github.com/drand/drand/http, method (*http.DrandHandler) PublicRand(http.ResponseWriter, *http.Request)
pkg github.com/drand/drand/http, method (*http.DrandHandler) RegisterDefaultBeaconHandler(*http.BeaconHandler)
pkg github.com/drand/drand/http, method (*http.DrandHandler) RegisterNewBeaconHandler(client.Client, string) *http.BeaconHandler
pkg github.com/drand/drand/http, method (*http.DrandHandler) RemoveBeaconHandler(string)
pkg github.com/drand/drand/http, method (*http.DrandHandler) SetHTTPHandler(http.Handler)
pkg github.com/drand/drand/http, method (*http.DrandHandler) Watch(*http.BeaconHandler, chan bool)
pkg github.com/drand/drand/http, type BeaconHandler struct
pkg github.com/drand/drand/http, type DrandHandler struct
pkg github.com/drand/drand/key, const GroupFolderName = "groups"
pkg github.com/drand/drand/key, const GroupFolderName ideal-string
pkg github.com/drand/drand/key, const KeyFolderName = "key"
pkg github.com/drand/drand/key, const KeyFolderName ideal-string
pkg github.com/drand/drand/key, func DefaultThreshold(int) int
pkg github.com/drand/drand/key, func Delete(string) error
pkg github.com/drand/drand/key, func GetFirstStore(map[string]key.Store) (string, key.Store)
pkg github.com/drand/drand/key, func GroupFromProto(*drand.GroupPacket, *crypto.Scheme) (*key.Group, error)
pkg github.com/drand/drand/key, func IdentityFromProto(*drand.Identity, *crypto.Scheme) (*key.Identity, error)
pkg github.com/drand/drand/key, func Load(string, key.Tomler) error
pkg github.com/drand/drand/key, func LoadGroup([]*key.Node, int64, *key.DistPublic, time.Duration, int64, *crypto.Scheme, string) *key.Group
pkg github.com/drand/drand/key, func MinimumT(int) int
pkg github.com/drand/drand/key, func NewFileStore(string, string) key.Store
pkg github.com/drand/drand/key, func NewFileStores(string) (map[string]key.Store, error)
pkg github.com/drand/drand/key, func NewGroup([]*key.Identity, int, int64, time.Duration, time.Duration, *crypto.Scheme, string) *key.Group
pkg github.com/drand/drand/key, func NewKeyPair(string, *crypto.Scheme) (*key.Pair, error)
pkg github.com/drand/drand/key, func NewTLSKeyPair(string, *crypto.Scheme) (*key.Pair, error)
pkg github.com/drand/drand/key, func NodeFromProto(*drand.Node, *crypto.Scheme) (*key.Node, error)
pkg github.com/drand/drand/key, func PointToString(kyber.Point) string
pkg github.com/drand/drand/key, func Save(string, key.Tomler, bool) error
pkg github.com/drand/drand/key, func ScalarToString(kyber.Scalar) string
pkg github.com/drand/drand/key, func StringToPoint(kyber.Group, string) (kyber.Point, error)
pkg github.com/drand/drand/key, func StringToScalar(kyber.Group, string) (kyber.Scalar, error)
pkg github.com/drand/drand/key, method (*key.DistPublic) Equal(*key.DistPublic) bool
pkg github.com/drand/drand/key, method (*key.DistPublic) FromTOML(*crypto.Scheme, interface{}) error
pkg github.com/drand/drand/key, method (*key.DistPublic) Hash() []uint8
pkg github.com/drand/drand/key, method (*key.DistPublic) Key() kyber.Point
pkg github.com/drand/drand/key, method (*key.DistPublic) PubPoly(*crypto.Scheme) *share.PubPoly
pkg github.com/drand/drand/key, method (*key.DistPublic) TOML() interface{}
pkg github.com/drand/drand/key, method (*key.DistPublic) TOMLValue() interface{}
pkg github.com/drand/drand/key, method (*key.Group) DKGNodes() []dkg.Node
pkg github.com/drand/drand/key, method (*key.Group) Equal(*key.Group) bool
pkg github.com/drand/drand/key, method (*key.Group) Find(*key.Identity) *key.Node
pkg github.com/drand/drand/key, method (*key.Group) FromTOML(interface{}) error
pkg github.com/drand/drand/key, method (*key.Group) GetGenesisSeed() []uint8
pkg github.com/drand/drand/key, method (*key.Group) Hash() []uint8
pkg github.com/drand/drand/key, method (*key.Group) Len() int
pkg github.com/drand/drand/key, method (*key.Group) Node(uint32) *key.Node
pkg github.com/drand/drand/key, method (*key.Group) Points() []kyber.Point
pkg github.com/drand/drand/key, method (*key.Group) String() string
pkg github.com/drand/drand/key, method (*key.Group) TOML() interface{}
pkg github.com/drand/drand/key, method (*key.Group) TOMLValue() interface{}
pkg github.com/drand/drand/key, method (*key.Group) ToProto(common.Version) *drand.GroupPacket
pkg github.com/drand/drand/key, method (*key.Group) UnsignedIdentities() []*key.Node
pkg github.com/drand/drand/key, method (*key.Identity) Address() string
pkg github.com/drand/drand/key, method (*key.Identity) Equal(*key.Identity) bool
pkg github.com/drand/drand/key, method (*key.Identity) FromTOML(interface{}) error
pkg github.com/drand/drand/key, method (*key.Identity) Hash() []uint8
pkg github.com/drand/drand/key, method (*key.Identity) IsTLS() bool
pkg github.com/drand/drand/key, method (*key.Identity) String() string
pkg github.com/drand/drand/key, method (*key.Identity) TOML() interface{}
pkg github.com/drand/drand/key, method (*key.Identity) TOMLValue() interface{}
pkg github.com/drand/drand/key, method (*key.Identity) ToProto() *drand.Identity
pkg github.com/drand/drand/key, method (*key.Identity) ValidSignature() error
pkg github.com/drand/drand/key, method (*key.Node) Equal(*key.Node) bool
pkg github.com/drand/drand/key, method (*key.Node) FromTOML(interface{}) error
pkg github.com/drand/drand/key, method (*key.Node) Hash() []uint8
pkg github.com/drand/drand/key, method (*key.Node) TOML() interface{}
pkg github.com/drand/drand/key, method (*key.Node) TOMLValue() interface{}
pkg github.com/drand/drand/key, method (*key.Pair) FromTOML(interface{}) error
pkg github.com/drand/drand/key, method (*key.Pair) Scheme() *crypto.Scheme
pkg github.com/drand/drand/key, method (*key.Pair) SelfSign() error
pkg github.com/drand/drand/key, method (*key.Pair) TOML() interface{}
pkg github.com/drand/drand/key, method (*key.Pair) TOMLValue() interface{}
pkg github.com/drand/drand/key, method (*key.Share) Commitments() []kyber.Point
pkg github.com/drand/drand/key, method (*key.Share) FromTOML(interface{}) error
pkg github.com/drand/drand/key, method (*key.Share) PriShare() *share.PriShare
pkg github.com/drand/drand/key, method (*key.Share) PrivateShare() *share.PriShare
pkg github.com/drand/drand/key, method (*key.Share) PubPoly() *share.PubPoly
pkg github.com/drand/drand/key, method (*key.Share) Public() *key.DistPublic
pkg github.com/drand/drand/key, method (*key.Share) TOML() interface{}
pkg github.com/drand/drand/key, method (*key.Share) TOMLValue() interface{}
pkg github.com/drand/drand/key, method (key.ByKey) Len() int
pkg github.com/drand/drand/key, method (key.ByKey) Less(int, int) bool
pkg github.com/drand/drand/key, method (key.ByKey) Swap(int, int)
pkg github.com/drand/drand/key, method (key.Node) Address() string
pkg github.com/drand/drand/key, method (key.Node) IsTLS() bool
pkg github.com/drand/drand/key, method (key.Node) String() string
pkg github.com/drand/drand/key, method (key.Node) ToProto() *drand.Identity
pkg github.com/drand/drand/key, method (key.Node) ValidSignature() error
pkg github.com/drand/drand/key, type ByKey []*key.Identity
pkg github.com/drand/drand/key, type DistPublic struct
pkg github.com/drand/drand/key, type DistPublic struct, Coefficients []kyber.Point
pkg github.com/drand/drand/key, type DistPublicTOML struct
pkg github.com/drand/drand/key, type DistPublicTOML struct, Coefficients []string
pkg github.com/drand/drand/key, type Group struct
pkg github.com/drand/drand/key, type Group struct, CatchupPeriod time.Duration
pkg github.com/drand/drand/key, type Group struct, GenesisSeed []uint8
pkg github.com/drand/drand/key, type Group struct, GenesisTime int64
pkg github.com/drand/drand/key, type Group struct, ID string
pkg github.com/drand/drand/key, type Group struct, Nodes []*key.Node
pkg github.com/drand/drand/key, type Group struct, Period time.Duration
pkg github.com/drand/drand/key, type Group struct, PublicKey *key.DistPublic
pkg github.com/drand/drand/key, type Group struct, Scheme *crypto.Scheme
pkg github.com/drand/drand/key, type Group struct, Threshold int
pkg github.com/drand/drand/key, type Group struct, TransitionTime int64
pkg github.com/drand/drand/key, type GroupTOML struct
pkg github.com/drand/drand/key, type GroupTOML struct, CatchupPeriod string
pkg github.com/drand/drand/key, type GroupTOML struct, GenesisSeed string
pkg github.com/drand/drand/key, type GroupTOML struct, GenesisTime int64
pkg github.com/drand/drand/key, type GroupTOML struct, ID string
pkg github.com/drand/drand/key, type GroupTOML struct, Nodes []*key.NodeTOML
pkg github.com/drand/drand/key, type GroupTOML struct, Period string
pkg github.com/drand/drand/key, type GroupTOML struct, PublicKey *key.DistPublicTOML
pkg github.com/drand/drand/key, type GroupTOML struct, SchemeID string
pkg github.com/drand/drand/key, type GroupTOML struct, Threshold int
pkg github.com/drand/drand/key, type GroupTOML struct, TransitionTime int64
pkg github.com/drand/drand/key, type Identity struct
pkg github.com/drand/drand/key, type Identity struct, Addr string
pkg github.com/drand/drand/key, type Identity struct, Key kyber.Point
pkg github.com/drand/drand/key, type Identity struct, Scheme *crypto.Scheme
pkg github.com/drand/drand/key, type Identity struct, Signature []uint8
pkg github.com/drand/drand/key, type Identity struct, TLS bool
pkg github.com/drand/drand/key, type Index = uint32
pkg github.com/drand/drand/key, type Node struct
pkg github.com/drand/drand/key, type Node struct, Index uint32
pkg github.com/drand/drand/key, type Node struct, embedded *key.Identity
pkg github.com/drand/drand/key, type NodeTOML struct
pkg github.com/drand/drand/key, type NodeTOML struct, Index uint32
pkg github.com/drand/drand/key, type NodeTOML struct, embedded *key.PublicTOML
pkg github.com/drand/drand/key, type Pair struct
pkg github.com/drand/drand/key, type Pair struct, Key kyber.Scalar
pkg github.com/drand/drand/key, type Pair struct, Public *key.Identity
pkg github.com/drand/drand/key, type PairTOML struct
pkg github.com/drand/drand/key, type PairTOML struct, Key string
pkg github.com/drand/drand/key, type PairTOML struct, SchemeName string
pkg github.com/drand/drand/key, type PublicTOML struct
pkg github.com/drand/drand/key, type PublicTOML struct, Address string
pkg github.com/drand/drand/key, type PublicTOML struct, Key string
pkg github.com/drand/drand/key, type PublicTOML struct, SchemeName string
pkg github.com/drand/drand/key, type PublicTOML struct, Signature string
pkg github.com/drand/drand/key, type PublicTOML struct, TLS bool
pkg github.com/drand/drand/key, type ResetOption int
pkg github.com/drand/drand/key, type Share struct
pkg github.com/drand/drand/key, type Share struct, Scheme *crypto.Scheme
pkg github.com/drand/drand/key, type Share struct, embedded dkg.DistKeyShare
pkg github.com/drand/drand/key, type ShareTOML struct
pkg github.com/drand/drand/key, type ShareTOML struct, Commits []string
pkg github.com/drand/drand/key, type ShareTOML struct, Index int
pkg github.com/drand/drand/key, type ShareTOML struct, PrivatePoly []string
pkg github.com/drand/drand/key, type ShareTOML struct, SchemeName string
pkg github.com/drand/drand/key, type ShareTOML struct, Share string
pkg github.com/drand/drand/key, type Store interface { LoadGroup, LoadKeyPair, LoadShare, Reset, SaveGroup, SaveKeyPair, SaveShare }
pkg github.com/drand/drand/key, type Store interface, LoadGroup() (*key.Group, error)
pkg github.com/drand/drand/key, type Store interface, LoadKeyPair(*crypto.Scheme) (*key.Pair, error)
pkg github.com/drand/drand/key, type Store interface, LoadShare(*crypto.Scheme) (*key.Share, error)
pkg github.com/drand/drand/key, type Store interface, Reset(...key.ResetOption) error
pkg github.com/drand/drand/key, type Store interface, SaveGroup(*key.Group) error
pkg github.com/drand/drand/key, type Store interface, SaveKeyPair(*key.Pair) error
pkg github.com/drand/drand/key, type Store interface, SaveShare(*key.Share) error
pkg github.com/drand/drand/key, type Tomler interface { FromTOML, TOML, TOMLValue }
pkg github.com/drand/drand/key, type Tomler interface, FromTOML(interface{}) error
pkg github.com/drand/drand/key, type Tomler interface, TOML() interface{}
pkg github.com/drand/drand/key, type Tomler interface, TOMLValue() interface{}
pkg github.com/drand/drand/key, var ErrInvalidKeyScheme error
pkg github.com/drand/drand/log, const DefaultLevel = 0
pkg github.com/drand/drand/log, const DefaultLevel int
pkg github.com/drand/drand/log, const LogDebug = -1
pkg github.com/drand/drand/log, const LogDebug int
pkg github.com/drand/drand/log, const LogError = 2
pkg github.com/drand/drand/log, const LogError int
pkg github.com/drand/drand/log, const LogFatal = 5
pkg github.com/drand/drand/log, const LogFatal int
pkg github.com/drand/drand/log, const LogInfo = 0
pkg github.com/drand/drand/log, const LogInfo int
pkg github.com/drand/drand/log, const LogPanic = 4
pkg github.com/drand/drand/log, const LogPanic int
pkg github.com/drand/drand/log, const LogWarn = 1
pkg github.com/drand/drand/log, const LogWarn int
pkg github.com/drand/drand/log, func ConfigureDefaultLogger(zapcore.WriteSyncer, int, bool)
pkg github.com/drand/drand/log, func DefaultLogger() log.Logger
pkg github.com/drand/drand/log, func NewJSONLogger(zapcore.WriteSyncer, int) log.Logger
pkg github.com/drand/drand/log, func NewLogger(zapcore.WriteSyncer, int) log.Logger
pkg github.com/drand/drand/log, func NewZapLogger(zapcore.WriteSyncer, zapcore.Encoder, int) *zap.Logger
pkg github.com/drand/drand/log, type Logger interface { AddCallerSkip, Debug, Debugw, Error, Errorw, Fatal, Fatalw, Info, Infow, Named, Panic, Panicw, Warn, Warnw, With }
pkg github.com/drand/drand/log, type Logger interface, AddCallerSkip(int) log.Logger
pkg github.com/drand/drand/log, type Logger interface, Debug(...interface{})
pkg github.com/drand/drand/log, type Logger interface, Debugw(string, ...interface{})
pkg github.com/drand/drand/log, type Logger interface, Error(...interface{})
pkg github.com/drand/drand/log, type Logger interface, Errorw(string, ...interface{})
pkg github.com/drand/drand/log, type Logger interface, Fatal(...interface{})
pkg github.com/drand/drand/log, type Logger interface, Fatalw(string, ...interface{})
pkg github.com/drand/drand/log, type Logger interface, Info(...interface{})
pkg github.com/drand/drand/log, type Logger interface, Infow(string, ...interface{})
pkg github.com/drand/drand/log, type Logger interface, Named(string) log.Logger
pkg github.com/drand/drand/log, type Logger interface, Panic(...interface{})
pkg github.com/drand/drand/log, type Logger interface, Panicw(string, ...interface{})
pkg github.com/drand/drand/log, type Logger interface, Warn(...interface{})
pkg github.com/drand/drand/log, type Logger interface, Warnw(string, ...interface{})
pkg github.com/drand/drand/log, type Logger interface, With(...interface{}) log.Logger
pkg github.com/drand/drand/lp2p, func ConstructHost(datastore.Datastore, crypto.PrivKey, string, []multiaddr.Multiaddr, log.Logger) (host.Host, *pubsub.PubSub, error)
pkg github.com/drand/drand/lp2p, func LoadOrCreatePrivKey(string, log.Logger) (crypto.PrivKey, error)
pkg github.com/drand/drand/lp2p, func NewGossipRelayNode(log.Logger, *lp2p.GossipRelayConfig) (*lp2p.GossipRelayNode, error)
pkg github.com/drand/drand/lp2p, func ParseMultiaddrSlice([]string) ([]multiaddr.Multiaddr, error)
pkg github.com/drand/drand/lp2p, func PubSubTopic(string) string
pkg github.com/drand/drand/lp2p, method (*lp2p.GossipRelayNode) Multiaddrs() []multiaddr.Multiaddr
pkg github.com/drand/drand/lp2p, method (*lp2p.GossipRelayNode) Shutdown()
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, Addr string
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, CertPath string
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, ChainHash string
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, Client client.Client
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, DataDir string
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, IdentityPath string
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, Insecure bool
pkg github.com/drand/drand/lp2p, type GossipRelayConfig struct, PeerWith []string
pkg github.com/drand/drand/lp2p, type GossipRelayNode struct
pkg github.com/drand/drand/lp2p/client, func NewWithPubsub(*pubsub.PubSub, *chain.Info, client.Cache) (*client.Client, error)
pkg github.com/drand/drand/lp2p/client, func WithPubsub(*pubsub.PubSub) client.Option
pkg github.com/drand/drand/lp2p/client, method (*client.Client) Close() error
pkg github.com/drand/drand/lp2p/client, method (*client.Client) SetLog(log.Logger)
pkg github.com/drand/drand/lp2p/client, method (*client.Client) Sub(chan drand.PublicRandResponse) client.UnsubFunc
pkg github.com/drand/drand/lp2p/client, method (*client.Client) Watch(context.Context) <-chan client.Result
pkg github.com/drand/drand/lp2p/client, type Client struct
pkg github.com/drand/drand/lp2p/client, type UnsubFunc func()
pkg github.com/drand/drand/metrics, const DKGDone = 3
pkg github.com/drand/drand/metrics, const DKGDone metrics.DKGState
pkg github.com/drand/drand/metrics, const DKGInProgress = 2
pkg github.com/drand/drand/metrics, const DKGInProgress metrics.DKGState
pkg github.com/drand/drand/metrics, const DKGNotStarted = 0
pkg github.com/drand/drand/metrics, const DKGNotStarted metrics.DKGState
pkg github.com/drand/drand/metrics, const DKGShutdown = 5
pkg github.com/drand/drand/metrics, const DKGShutdown metrics.DKGState
pkg github.com/drand/drand/metrics, const DKGUnknownState = 4
pkg github.com/drand/drand/metrics, const DKGUnknownState metrics.DKGState
pkg github.com/drand/drand/metrics, const DKGWaiting = 1
pkg github.com/drand/drand/metrics, const DKGWaiting metrics.DKGState
pkg github.com/drand/drand/metrics, const ReshareIdle = 0
pkg github.com/drand/drand/metrics, const ReshareIdle metrics.ReshareState
pkg github.com/drand/drand/metrics, const ReshareInProgess = 2
pkg github.com/drand/drand/metrics, const ReshareInProgess metrics.ReshareState
pkg github.com/drand/drand/metrics, const ReshareShutdown = 4
pkg github.com/drand/drand/metrics, const ReshareShutdown metrics.ReshareState
pkg github.com/drand/drand/metrics, const ReshareUnknownState = 3
pkg github.com/drand/drand/metrics, const ReshareUnknownState metrics.ReshareState
pkg github.com/drand/drand/metrics, const ReshareWaiting = 1
pkg github.com/drand/drand/metrics, const ReshareWaiting metrics.ReshareState
pkg github.com/drand/drand/metrics, func DKGStateChange(metrics.DKGState, string, bool)
pkg github.com/drand/drand/metrics, func ErrorSendingPartial(string, string)
pkg github.com/drand/drand/metrics, func GroupHandler() http.Handler
pkg github.com/drand/drand/metrics, func NewThresholdMonitor(string, log.Logger, int) *metrics.ThresholdMonitor
pkg github.com/drand/drand/metrics, func RegisterClientMetrics(prometheus.Registerer) error
pkg github.com/drand/drand/metrics, func ReshareStateChange(metrics.ReshareState, string, bool)
pkg github.com/drand/drand/metrics, func Start(string, http.Handler, []metrics.Handler) net.Listener
pkg github.com/drand/drand/metrics, func SuccessfulPartial(string, string)
pkg github.com/drand/drand/metrics, method (*metrics.ThresholdMonitor) ReportFailure(string, string)
pkg github.com/drand/drand/metrics, method (*metrics.ThresholdMonitor) Start()
pkg github.com/drand/drand/metrics, method (*metrics.ThresholdMonitor) Stop()
pkg github.com/drand/drand/metrics, method (*metrics.ThresholdMonitor) UpdateThreshold(int)
pkg github.com/drand/drand/metrics, type DKGState int
pkg github.com/drand/drand/metrics, type Handler func(string) (http.Handler, error)
pkg github.com/drand/drand/metrics, type ReshareState int
pkg github.com/drand/drand/metrics, type ThresholdMonitor struct
pkg github.com/drand/drand/metrics, var APICallCounter *prometheus.CounterVec
pkg github.com/drand/drand/metrics, var BeaconDiscrepancyLatency *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var ClientDNSLatencyVec *prometheus.HistogramVec
pkg github.com/drand/drand/metrics, var ClientHTTPHeartbeatFailure *prometheus.CounterVec
pkg github.com/drand/drand/metrics, var ClientHTTPHeartbeatLatency *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var ClientHTTPHeartbeatSuccess *prometheus.CounterVec
pkg github.com/drand/drand/metrics, var ClientInFlight *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var ClientLatencyVec *prometheus.HistogramVec
pkg github.com/drand/drand/metrics, var ClientMetrics *prometheus.Registry
pkg github.com/drand/drand/metrics, var ClientRequests *prometheus.CounterVec
pkg github.com/drand/drand/metrics, var ClientTLSLatencyVec *prometheus.HistogramVec
pkg github.com/drand/drand/metrics, var ClientWatchLatency prometheus.Gauge
pkg github.com/drand/drand/metrics, var DrandStartTimestamp prometheus.Gauge
pkg github.com/drand/drand/metrics, var DrandStorageBackend *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var ErrorSendingPartialCounter *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var GroupDialFailures *prometheus.CounterVec
pkg github.com/drand/drand/metrics, var GroupMetrics *prometheus.Registry
pkg github.com/drand/drand/metrics, var GroupSize *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var GroupThreshold *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var HTTPCallCounter *prometheus.CounterVec
pkg github.com/drand/drand/metrics, var HTTPInFlight prometheus.Gauge
pkg github.com/drand/drand/metrics, var HTTPLatency *prometheus.HistogramVec
pkg github.com/drand/drand/metrics, var HTTPMetrics *prometheus.Registry
pkg github.com/drand/drand/metrics, var IsDrandNode prometheus.Gauge
pkg github.com/drand/drand/metrics, var LastBeaconRound *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var OutgoingConnectionState *prometheus.GaugeVec
pkg github.com/drand/drand/metrics, var OutgoingConnections prometheus.Gauge
pkg github.com/drand/drand/metrics, var PrivateMetrics *prometheus.Registry
pkg github.com/drand/drand/metrics/pprof, func WithProfile() http.Handler
pkg github.com/drand/drand/net, const MaxSyncBuffer = 500
pkg github.com/drand/drand/net, const MaxSyncBuffer ideal-int
pkg github.com/drand/drand/net, func CreatePeer(string, bool) net.Peer
pkg github.com/drand/drand/net, func NewCertManager() *net.CertManager
pkg github.com/drand/drand/net, func NewControlClient(string) (*net.ControlClient, error)
pkg github.com/drand/drand/net, func NewGRPCListenerForPrivate(context.Context, string, string, string, net.Service, bool, ...grpc.ServerOption) (net.Listener, error)
pkg github.com/drand/drand/net, func NewGRPCPrivateGateway(context.Context, string, string, string, *net.CertManager, net.Service, bool, ...grpc.DialOption) (*net.PrivateGateway, error)
pkg github.com/drand/drand/net, func NewGrpcClient(...grpc.DialOption) net.Client
pkg github.com/drand/drand/net, func NewGrpcClientFromCertManager(*net.CertManager, ...grpc.DialOption) net.Client
pkg github.com/drand/drand/net, func NewGrpcClientWithTimeout(time.Duration, ...grpc.DialOption) net.Client
pkg github.com/drand/drand/net, func NewRESTListenerForPublic(context.Context, string, string, string, http.Handler, bool) (net.Listener, error)
pkg github.com/drand/drand/net, func NewRESTPublicGateway(context.Context, string, string, string, *net.CertManager, http.Handler, bool) (*net.PublicGateway, error)
pkg github.com/drand/drand/net, func NewTCPGrpcControlListener(drand.ControlServer, string) (net.ControlListener, error)
pkg github.com/drand/drand/net, func RemoteAddress(context.Context) string
pkg github.com/drand/drand/net, method (*net.CertManager) Add(string) error
pkg github.com/drand/drand/net, method (*net.CertManager) Pool() *x509.CertPool
pkg github.com/drand/drand/net, method (*net.ControlClient) BackupDB(string, string) error
pkg github.com/drand/drand/net, method (*net.ControlClient) ChainInfo(string) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) GroupFile(string) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) InitDKG(net.Peer, *drand.EntropyInfo, string, string) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) InitDKGLeader(int, int, time.Duration, time.Duration, time.Duration, *drand.EntropyInfo, string, int, string) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) InitReshare(net.Peer, string, string, bool, string) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) InitReshareLeader(int, int, time.Duration, time.Duration, string, string, int, string) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) ListBeaconIDs() (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) ListSchemes() (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) LoadBeacon(string) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) Ping() error
pkg github.com/drand/drand/net, method (*net.ControlClient) PrivateKey(string) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) PublicKey(string) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) RemoteStatus(context.Context, []*drand.Address, string) (map[string]*drand.StatusResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) Shutdown(string) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) StartCheckChain(context.Context, string, []string, bool, uint64, string) (chan *drand.SyncProgress, chan error, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) StartFollowChain(context.Context, string, []string, bool, uint64, string) (chan *drand.SyncProgress, chan error, error)
pkg github.com/drand/drand/net, method (*net.ControlClient) Status(string) (*drand.StatusResponse, error)
pkg github.com/drand/drand/net, method (*net.ControlListener) Start()
pkg github.com/drand/drand/net, method (*net.ControlListener) Stop()
pkg github.com/drand/drand/net, method (*net.DefaultControlServer) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/net, method (*net.DefaultControlServer) PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/net, method (*net.DefaultControlServer) PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/net, method (*net.DefaultControlServer) PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/net, method (*net.DefaultControlServer) RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/net, method (*net.DefaultControlServer) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/net, method (*net.HexJSON) ContentType() string
pkg github.com/drand/drand/net, method (*net.HexJSON) Delimiter() []uint8
pkg github.com/drand/drand/net, method (*net.HexJSON) Marshal(interface{}) ([]uint8, error)
pkg github.com/drand/drand/net, method (*net.HexJSON) NewDecoder(io.Reader) runtime.Decoder
pkg github.com/drand/drand/net, method (*net.HexJSON) NewEncoder(io.Writer) runtime.Encoder
pkg github.com/drand/drand/net, method (*net.HexJSON) Unmarshal([]uint8, interface{}) error
pkg github.com/drand/drand/net, method (*net.PrivateGateway) StartAll()
pkg github.com/drand/drand/net, method (*net.PrivateGateway) StopAll(context.Context)
pkg github.com/drand/drand/net, method (*net.PublicGateway) StartAll()
pkg github.com/drand/drand/net, method (*net.PublicGateway) StopAll(context.Context)
pkg github.com/drand/drand/net, method (net.PrivateGateway) Addr() string
pkg github.com/drand/drand/net, method (net.PrivateGateway) BroadcastDKG(context.Context, net.Peer, *drand.DKGPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, method (net.PrivateGateway) ChainInfo(context.Context, net.Peer, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/net, method (net.PrivateGateway) GetIdentity(context.Context, net.Peer, *drand.IdentityRequest, ...grpc.CallOption) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/net, method (net.PrivateGateway) Home(context.Context, net.Peer, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/net, method (net.PrivateGateway) PartialBeacon(context.Context, net.Peer, *drand.PartialBeaconPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, method (net.PrivateGateway) PublicRand(context.Context, net.Peer, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, method (net.PrivateGateway) PublicRandStream(context.Context, net.Peer, *drand.PublicRandRequest, ...grpc.CallOption) (chan *drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, method (net.PrivateGateway) PushDKGInfo(context.Context, net.Peer, *drand.DKGInfoPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, method (net.PrivateGateway) SignalDKGParticipant(context.Context, net.Peer, *drand.SignalDKGPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, method (net.PrivateGateway) Start()
pkg github.com/drand/drand/net, method (net.PrivateGateway) Status(context.Context, net.Peer, *drand.StatusRequest, ...grpc.CallOption) (*drand.StatusResponse, error)
pkg github.com/drand/drand/net, method (net.PrivateGateway) Stop(context.Context)
pkg github.com/drand/drand/net, method (net.PrivateGateway) SyncChain(context.Context, net.Peer, *drand.SyncRequest, ...grpc.CallOption) (chan *drand.BeaconPacket, error)
pkg github.com/drand/drand/net, method (net.PublicGateway) Addr() string
pkg github.com/drand/drand/net, method (net.PublicGateway) Start()
pkg github.com/drand/drand/net, method (net.PublicGateway) Stop(context.Context)
pkg github.com/drand/drand/net, type CallOption = grpc.CallOption
pkg github.com/drand/drand/net, type CertManager struct
pkg github.com/drand/drand/net, type Client interface { BroadcastDKG, ChainInfo, GetIdentity, HandleHTTP, Home, PartialBeacon, PublicRand, PublicRandStream, PushDKGInfo, SignalDKGParticipant, Status, SyncChain }
pkg github.com/drand/drand/net, type Client interface, BroadcastDKG(context.Context, net.Peer, *drand.DKGPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type Client interface, ChainInfo(context.Context, net.Peer, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/net, type Client interface, GetIdentity(context.Context, net.Peer, *drand.IdentityRequest, ...grpc.CallOption) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/net, type Client interface, HandleHTTP(net.Peer) (http.Handler, error)
pkg github.com/drand/drand/net, type Client interface, Home(context.Context, net.Peer, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/net, type Client interface, PartialBeacon(context.Context, net.Peer, *drand.PartialBeaconPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type Client interface, PublicRand(context.Context, net.Peer, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, type Client interface, PublicRandStream(context.Context, net.Peer, *drand.PublicRandRequest, ...grpc.CallOption) (chan *drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, type Client interface, PushDKGInfo(context.Context, net.Peer, *drand.DKGInfoPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type Client interface, SignalDKGParticipant(context.Context, net.Peer, *drand.SignalDKGPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type Client interface, Status(context.Context, net.Peer, *drand.StatusRequest, ...grpc.CallOption) (*drand.StatusResponse, error)
pkg github.com/drand/drand/net, type Client interface, SyncChain(context.Context, net.Peer, *drand.SyncRequest, ...grpc.CallOption) (chan *drand.BeaconPacket, error)
pkg github.com/drand/drand/net, type ControlClient struct
pkg github.com/drand/drand/net, type ControlListener struct
pkg github.com/drand/drand/net, type DefaultControlServer struct
pkg github.com/drand/drand/net, type DefaultControlServer struct, C drand.ControlServer
pkg github.com/drand/drand/net, type HTTPClient interface { HandleHTTP }
pkg github.com/drand/drand/net, type HTTPClient interface, HandleHTTP(net.Peer) (http.Handler, error)
pkg github.com/drand/drand/net, type HexJSON struct
pkg github.com/drand/drand/net, type Listener interface { Addr, Start, Stop }
pkg github.com/drand/drand/net, type Listener interface, Addr() string
pkg github.com/drand/drand/net, type Listener interface, Start()
pkg github.com/drand/drand/net, type Listener interface, Stop(context.Context)
pkg github.com/drand/drand/net, type Peer interface { Address, IsTLS }
pkg github.com/drand/drand/net, type Peer interface, Address() string
pkg github.com/drand/drand/net, type Peer interface, IsTLS() bool
pkg github.com/drand/drand/net, type PrivateGateway struct
pkg github.com/drand/drand/net, type PrivateGateway struct, embedded net.Listener
pkg github.com/drand/drand/net, type PrivateGateway struct, embedded net.ProtocolClient
pkg github.com/drand/drand/net, type PrivateGateway struct, embedded net.PublicClient
pkg github.com/drand/drand/net, type ProtocolClient interface { BroadcastDKG, GetIdentity, PartialBeacon, PushDKGInfo, SignalDKGParticipant, Status, SyncChain }
pkg github.com/drand/drand/net, type ProtocolClient interface, BroadcastDKG(context.Context, net.Peer, *drand.DKGPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type ProtocolClient interface, GetIdentity(context.Context, net.Peer, *drand.IdentityRequest, ...grpc.CallOption) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/net, type ProtocolClient interface, PartialBeacon(context.Context, net.Peer, *drand.PartialBeaconPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type ProtocolClient interface, PushDKGInfo(context.Context, net.Peer, *drand.DKGInfoPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type ProtocolClient interface, SignalDKGParticipant(context.Context, net.Peer, *drand.SignalDKGPacket, ...grpc.CallOption) error
pkg github.com/drand/drand/net, type ProtocolClient interface, Status(context.Context, net.Peer, *drand.StatusRequest, ...grpc.CallOption) (*drand.StatusResponse, error)
pkg github.com/drand/drand/net, type ProtocolClient interface, SyncChain(context.Context, net.Peer, *drand.SyncRequest, ...grpc.CallOption) (chan *drand.BeaconPacket, error)
pkg github.com/drand/drand/net, type PublicClient interface { ChainInfo, Home, PublicRand, PublicRandStream }
pkg github.com/drand/drand/net, type PublicClient interface, ChainInfo(context.Context, net.Peer, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/net, type PublicClient interface, Home(context.Context, net.Peer, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/net, type PublicClient interface, PublicRand(context.Context, net.Peer, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, type PublicClient interface, PublicRandStream(context.Context, net.Peer, *drand.PublicRandRequest, ...grpc.CallOption) (chan *drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, type PublicGateway struct
pkg github.com/drand/drand/net, type PublicGateway struct, embedded net.Listener
pkg github.com/drand/drand/net, type Service interface { BackupDatabase, BroadcastDKG, ChainInfo, GetIdentity, GroupFile, Home, InitDKG, InitReshare, ListBeaconIDs, ListSchemes, LoadBeacon, NodeVersionStreamValidator, NodeVersionValidator, PartialBeacon, PingPong, PrivateKey, PublicKey, PublicRand, PublicRandStream, PushDKGInfo, RemoteStatus, Share, Shutdown, SignalDKGParticipant, StartCheckChain, StartFollowChain, Status, SyncChain }
pkg github.com/drand/drand/net, type Service interface, BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/net, type Service interface, BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/net, type Service interface, ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/net, type Service interface, GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/net, type Service interface, GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, type Service interface, Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/net, type Service interface, InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, type Service interface, InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/net, type Service interface, ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/net, type Service interface, ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/net, type Service interface, LoadBeacon(context.Context, *drand.LoadBeaconRequest) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/net, type Service interface, NodeVersionStreamValidator(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error
pkg github.com/drand/drand/net, type Service interface, NodeVersionValidator(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error)
pkg github.com/drand/drand/net, type Service interface, PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/net, type Service interface, PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/net, type Service interface, PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/net, type Service interface, PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/net, type Service interface, PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/net, type Service interface, PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/net, type Service interface, PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/net, type Service interface, RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/net, type Service interface, Share(context.Context, *drand.ShareRequest) (*drand.ShareResponse, error)
pkg github.com/drand/drand/net, type Service interface, Shutdown(context.Context, *drand.ShutdownRequest) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/net, type Service interface, SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/net, type Service interface, StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/net, type Service interface, StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/net, type Service interface, Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/net, type Service interface, SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/net, type Stoppable interface { Stop }
pkg github.com/drand/drand/net, type Stoppable interface, Stop()
pkg github.com/drand/drand/protobuf/common, func NewMetadata(*common.NodeVersion) *common.Metadata
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) GetBeaconID() string
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) GetChainHash() []uint8
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) GetNodeVersion() *common.NodeVersion
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) ProtoMessage()
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) Reset()
pkg github.com/drand/drand/protobuf/common, method (*common.Metadata) String() string
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) GetMajor() uint32
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) GetMinor() uint32
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) GetPatch() uint32
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) GetPrerelease() string
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) ProtoMessage()
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) Reset()
pkg github.com/drand/drand/protobuf/common, method (*common.NodeVersion) String() string
pkg github.com/drand/drand/protobuf/common, type Metadata struct
pkg github.com/drand/drand/protobuf/common, type Metadata struct, BeaconID string
pkg github.com/drand/drand/protobuf/common, type Metadata struct, ChainHash []uint8
pkg github.com/drand/drand/protobuf/common, type Metadata struct, NodeVersion *common.NodeVersion
pkg github.com/drand/drand/protobuf/common, type NodeVersion struct
pkg github.com/drand/drand/protobuf/common, type NodeVersion struct, Major uint32
pkg github.com/drand/drand/protobuf/common, type NodeVersion struct, Minor uint32
pkg github.com/drand/drand/protobuf/common, type NodeVersion struct, Patch uint32
pkg github.com/drand/drand/protobuf/common, type NodeVersion struct, Prerelease *string
pkg github.com/drand/drand/protobuf/common, var File_common_common_proto protoreflect.FileDescriptor
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) GetEncryptedShare() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) GetShareIndex() uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Deal) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) GetCommits() [][]uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) GetDealerIndex() uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) GetDeals() []*dkg.Deal
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) GetSessionId() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.DealBundle) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) GetShare() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) GetShareIndex() uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Justification) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) GetDealerIndex() uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) GetJustifications() []*dkg.Justification
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) GetSessionId() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.JustificationBundle) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) GetBundle() dkg.isPacket_Bundle
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) GetDeal() *dkg.DealBundle
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) GetJustification() *dkg.JustificationBundle
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) GetResponse() *dkg.ResponseBundle
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Packet) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) GetDealerIndex() uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) GetStatus() bool
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.Response) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) GetResponses() []*dkg.Response
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) GetSessionId() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) GetShareIndex() uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) ProtoMessage()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) Reset()
pkg github.com/drand/drand/protobuf/crypto/dkg, method (*dkg.ResponseBundle) String() string
pkg github.com/drand/drand/protobuf/crypto/dkg, type Deal struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Deal struct, EncryptedShare []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type Deal struct, ShareIndex uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, type DealBundle struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type DealBundle struct, Commits [][]uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type DealBundle struct, DealerIndex uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, type DealBundle struct, Deals []*dkg.Deal
pkg github.com/drand/drand/protobuf/crypto/dkg, type DealBundle struct, SessionId []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type DealBundle struct, Signature []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type Justification struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Justification struct, Share []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type Justification struct, ShareIndex uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, type JustificationBundle struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type JustificationBundle struct, DealerIndex uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, type JustificationBundle struct, Justifications []*dkg.Justification
pkg github.com/drand/drand/protobuf/crypto/dkg, type JustificationBundle struct, SessionId []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type JustificationBundle struct, Signature []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet struct, Bundle dkg.isPacket_Bundle
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet_Deal struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet_Deal struct, Deal *dkg.DealBundle
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet_Justification struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet_Justification struct, Justification *dkg.JustificationBundle
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet_Response struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Packet_Response struct, Response *dkg.ResponseBundle
pkg github.com/drand/drand/protobuf/crypto/dkg, type Response struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type Response struct, DealerIndex uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, type Response struct, Status bool
pkg github.com/drand/drand/protobuf/crypto/dkg, type ResponseBundle struct
pkg github.com/drand/drand/protobuf/crypto/dkg, type ResponseBundle struct, Responses []*dkg.Response
pkg github.com/drand/drand/protobuf/crypto/dkg, type ResponseBundle struct, SessionId []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, type ResponseBundle struct, ShareIndex uint32
pkg github.com/drand/drand/protobuf/crypto/dkg, type ResponseBundle struct, Signature []uint8
pkg github.com/drand/drand/protobuf/crypto/dkg, var File_crypto_dkg_dkg_proto protoreflect.FileDescriptor
pkg github.com/drand/drand/protobuf/drand, func NewControlClient(grpc.ClientConnInterface) drand.ControlClient
pkg github.com/drand/drand/protobuf/drand, func NewProtocolClient(grpc.ClientConnInterface) drand.ProtocolClient
pkg github.com/drand/drand/protobuf/drand, func NewPublicClient(grpc.ClientConnInterface) drand.PublicClient
pkg github.com/drand/drand/protobuf/drand, func RegisterControlServer(grpc.ServiceRegistrar, drand.ControlServer)
pkg github.com/drand/drand/protobuf/drand, func RegisterProtocolServer(grpc.ServiceRegistrar, drand.ProtocolServer)
pkg github.com/drand/drand/protobuf/drand, func RegisterPublicServer(grpc.ServiceRegistrar, drand.PublicServer)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) GetAddress() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) GetTls() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Address) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) GetOutputFile() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BackupDBResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) GetPreviousSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) GetRound() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) GetIsRunning() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) GetIsServing() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) GetIsStarted() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) GetIsStopped() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) GetStatus() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.BeaconStatus) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetGenesisTime() int64
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetGroupHash() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetHash() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetPeriod() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetPublicKey() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) GetSchemeID() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainInfoRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) GetIsEmpty() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) GetLastRound() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) GetLength() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ChainStoreStatus) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) GetCoKey() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.CokeyResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) GetDkgTimeout() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) GetNewGroup() *drand.GroupPacket
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) GetSecretProof() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGInfoPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) GetDkg() *dkg.Packet
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.DKGPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.DkgStatus) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.DkgStatus) GetStatus() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.DkgStatus) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.DkgStatus) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.DkgStatus) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.DkgStatus) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Empty) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Empty) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.Empty) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Empty) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.Empty) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Empty) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) GetScript() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) GetUserOnly() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.EntropyInfo) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) GetLocation() drand.isGroupInfo_Location
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) GetPath() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) GetUrl() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupInfo) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetCatchupPeriod() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetDistKey() [][]uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetGenesisSeed() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetGenesisTime() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetNodes() []*drand.Node
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetPeriod() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetSchemeID() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetThreshold() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) GetTransitionTime() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) GetGroupToml() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.GroupTOMLResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) GetStatus() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.HomeResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) GetAddress() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) GetKey() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) GetTls() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Identity) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) GetAddress() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) GetKey() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) GetSchemeName() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) GetTls() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.IdentityResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) GetBeaconPeriod() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) GetCatchupPeriod() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) GetEntropy() *drand.EntropyInfo
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) GetInfo() *drand.SetupInfoPacket
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) GetSchemeID() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacketResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacketResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacketResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacketResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacketResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitDKGPacketResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) GetCatchupPeriod() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) GetCatchupPeriodChanged() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) GetInfo() *drand.SetupInfoPacket
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) GetOld() *drand.GroupInfo
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.InitResharePacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) GetIds() []string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListBeaconIDsResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) GetIds() []string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ListSchemesResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.LoadBeaconResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) GetIndex() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) GetPublic() *drand.Identity
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Node) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) GetPartialSig() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) GetPreviousSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) GetRound() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PartialBeaconPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Ping) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Ping) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.Ping) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Ping) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.Ping) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Ping) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.Pong) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.Pong) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.Pong) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Pong) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.Pong) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.Pong) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) GetPriKey() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PrivateKeyResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) GetPubKey() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicKeyResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) GetRound() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) GetPreviousSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) GetRandomness() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) GetRound() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) GetSignature() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.PublicRandResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) GetAddresses() []*drand.Address
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusResponse) GetStatuses() map[string]*drand.StatusResponse
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.RemoteStatusResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ReshareStatus) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ReshareStatus) GetStatus() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.ReshareStatus) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ReshareStatus) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ReshareStatus) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ReshareStatus) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetBeaconOffset() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetDkgOffset() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetForce() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetLeader() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetLeaderAddress() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetLeaderTls() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetNodes() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetSecret() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetThreshold() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) GetTimeout() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SetupInfoPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) GetIndex() uint32
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) GetShare() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShareResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownResponse) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.ShutdownResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) GetNode() *drand.Identity
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) GetPreviousGroupHash() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) GetSecretProof() []uint8
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SignalDKGPacket) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) GetInfoHash() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) GetIsTls() bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) GetNodes() []string
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) GetUpTo() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.StartSyncRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) GetCheckConn() []*drand.Address
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) GetBeacon() *drand.BeaconStatus
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) GetChainStore() *drand.ChainStoreStatus
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) GetConnections() map[string]bool
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) GetDkg() *drand.DkgStatus
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) GetReshare() *drand.ReshareStatus
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.StatusResponse) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) GetCurrent() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) GetTarget() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncProgress) String() string
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) Descriptor() ([]uint8, []int)
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) GetFromRound() uint64
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) GetMetadata() *common.Metadata
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) ProtoMessage()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) ProtoReflect() protoreflect.Message
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) Reset()
pkg github.com/drand/drand/protobuf/drand, method (*drand.SyncRequest) String() string
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) LoadBeacon(context.Context, *drand.LoadBeaconRequest) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) Share(context.Context, *drand.ShareRequest) (*drand.ShareResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) Shutdown(context.Context, *drand.ShutdownRequest) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedControlServer) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedProtocolServer) SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedPublicServer) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedPublicServer) Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedPublicServer) PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/protobuf/drand, method (drand.UnimplementedPublicServer) PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/protobuf/drand, type Address struct
pkg github.com/drand/drand/protobuf/drand, type Address struct, Address string
pkg github.com/drand/drand/protobuf/drand, type Address struct, Tls bool
pkg github.com/drand/drand/protobuf/drand, type BackupDBRequest struct
pkg github.com/drand/drand/protobuf/drand, type BackupDBRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type BackupDBRequest struct, OutputFile string
pkg github.com/drand/drand/protobuf/drand, type BackupDBResponse struct
pkg github.com/drand/drand/protobuf/drand, type BackupDBResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type BeaconPacket struct
pkg github.com/drand/drand/protobuf/drand, type BeaconPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type BeaconPacket struct, PreviousSignature []uint8
pkg github.com/drand/drand/protobuf/drand, type BeaconPacket struct, Round uint64
pkg github.com/drand/drand/protobuf/drand, type BeaconPacket struct, Signature []uint8
pkg github.com/drand/drand/protobuf/drand, type BeaconStatus struct
pkg github.com/drand/drand/protobuf/drand, type BeaconStatus struct, IsRunning bool
pkg github.com/drand/drand/protobuf/drand, type BeaconStatus struct, IsServing bool
pkg github.com/drand/drand/protobuf/drand, type BeaconStatus struct, IsStarted bool
pkg github.com/drand/drand/protobuf/drand, type BeaconStatus struct, IsStopped bool
pkg github.com/drand/drand/protobuf/drand, type BeaconStatus struct, Status uint32
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, GenesisTime int64
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, GroupHash []uint8
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, Hash []uint8
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, Period uint32
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, PublicKey []uint8
pkg github.com/drand/drand/protobuf/drand, type ChainInfoPacket struct, SchemeID string
pkg github.com/drand/drand/protobuf/drand, type ChainInfoRequest struct
pkg github.com/drand/drand/protobuf/drand, type ChainInfoRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ChainStoreStatus struct
pkg github.com/drand/drand/protobuf/drand, type ChainStoreStatus struct, IsEmpty bool
pkg github.com/drand/drand/protobuf/drand, type ChainStoreStatus struct, LastRound uint64
pkg github.com/drand/drand/protobuf/drand, type ChainStoreStatus struct, Length uint64
pkg github.com/drand/drand/protobuf/drand, type CokeyRequest struct
pkg github.com/drand/drand/protobuf/drand, type CokeyRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type CokeyResponse struct
pkg github.com/drand/drand/protobuf/drand, type CokeyResponse struct, CoKey []uint8
pkg github.com/drand/drand/protobuf/drand, type CokeyResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface { BackupDatabase, ChainInfo, GroupFile, InitDKG, InitReshare, ListBeaconIDs, ListSchemes, LoadBeacon, PingPong, PrivateKey, PublicKey, RemoteStatus, Share, Shutdown, StartCheckChain, StartFollowChain, Status }
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, BackupDatabase(context.Context, *drand.BackupDBRequest, ...grpc.CallOption) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, ChainInfo(context.Context, *drand.ChainInfoRequest, ...grpc.CallOption) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, GroupFile(context.Context, *drand.GroupRequest, ...grpc.CallOption) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, InitDKG(context.Context, *drand.InitDKGPacket, ...grpc.CallOption) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, InitReshare(context.Context, *drand.InitResharePacket, ...grpc.CallOption) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest, ...grpc.CallOption) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, ListSchemes(context.Context, *drand.ListSchemesRequest, ...grpc.CallOption) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, LoadBeacon(context.Context, *drand.LoadBeaconRequest, ...grpc.CallOption) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, PingPong(context.Context, *drand.Ping, ...grpc.CallOption) (*drand.Pong, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, PrivateKey(context.Context, *drand.PrivateKeyRequest, ...grpc.CallOption) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, PublicKey(context.Context, *drand.PublicKeyRequest, ...grpc.CallOption) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, RemoteStatus(context.Context, *drand.RemoteStatusRequest, ...grpc.CallOption) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, Share(context.Context, *drand.ShareRequest, ...grpc.CallOption) (*drand.ShareResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, Shutdown(context.Context, *drand.ShutdownRequest, ...grpc.CallOption) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, StartCheckChain(context.Context, *drand.StartSyncRequest, ...grpc.CallOption) (drand.Control_StartCheckChainClient, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, StartFollowChain(context.Context, *drand.StartSyncRequest, ...grpc.CallOption) (drand.Control_StartFollowChainClient, error)
pkg github.com/drand/drand/protobuf/drand, type ControlClient interface, Status(context.Context, *drand.StatusRequest, ...grpc.CallOption) (*drand.StatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface { BackupDatabase, ChainInfo, GroupFile, InitDKG, InitReshare, ListBeaconIDs, ListSchemes, LoadBeacon, PingPong, PrivateKey, PublicKey, RemoteStatus, Share, Shutdown, StartCheckChain, StartFollowChain, Status }
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, LoadBeacon(context.Context, *drand.LoadBeaconRequest) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, Share(context.Context, *drand.ShareRequest) (*drand.ShareResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, Shutdown(context.Context, *drand.ShutdownRequest) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/protobuf/drand, type ControlServer interface, Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface { CloseSend, Context, Header, Recv, RecvMsg, SendMsg, Trailer }
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, CloseSend() error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, Header() (metadata.MD, error)
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, Recv() (*drand.SyncProgress, error)
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainClient interface, Trailer() metadata.MD
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface { Context, RecvMsg, Send, SendHeader, SendMsg, SetHeader, SetTrailer }
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, Send(*drand.SyncProgress) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, SendHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, SetHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartCheckChainServer interface, SetTrailer(metadata.MD)
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface { CloseSend, Context, Header, Recv, RecvMsg, SendMsg, Trailer }
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, CloseSend() error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, Header() (metadata.MD, error)
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, Recv() (*drand.SyncProgress, error)
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainClient interface, Trailer() metadata.MD
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface { Context, RecvMsg, Send, SendHeader, SendMsg, SetHeader, SetTrailer }
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, Send(*drand.SyncProgress) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, SendHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, SetHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Control_StartFollowChainServer interface, SetTrailer(metadata.MD)
pkg github.com/drand/drand/protobuf/drand, type DKGInfoPacket struct
pkg github.com/drand/drand/protobuf/drand, type DKGInfoPacket struct, DkgTimeout uint32
pkg github.com/drand/drand/protobuf/drand, type DKGInfoPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type DKGInfoPacket struct, NewGroup *drand.GroupPacket
pkg github.com/drand/drand/protobuf/drand, type DKGInfoPacket struct, SecretProof []uint8
pkg github.com/drand/drand/protobuf/drand, type DKGInfoPacket struct, Signature []uint8
pkg github.com/drand/drand/protobuf/drand, type DKGPacket struct
pkg github.com/drand/drand/protobuf/drand, type DKGPacket struct, Dkg *dkg.Packet
pkg github.com/drand/drand/protobuf/drand, type DKGPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type DkgStatus struct
pkg github.com/drand/drand/protobuf/drand, type DkgStatus struct, Status uint32
pkg github.com/drand/drand/protobuf/drand, type Empty struct
pkg github.com/drand/drand/protobuf/drand, type Empty struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type EntropyInfo struct
pkg github.com/drand/drand/protobuf/drand, type EntropyInfo struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type EntropyInfo struct, Script string
pkg github.com/drand/drand/protobuf/drand, type EntropyInfo struct, UserOnly bool
pkg github.com/drand/drand/protobuf/drand, type GroupInfo struct
pkg github.com/drand/drand/protobuf/drand, type GroupInfo struct, Location drand.isGroupInfo_Location
pkg github.com/drand/drand/protobuf/drand, type GroupInfo_Path struct
pkg github.com/drand/drand/protobuf/drand, type GroupInfo_Path struct, Path string
pkg github.com/drand/drand/protobuf/drand, type GroupInfo_Url struct
pkg github.com/drand/drand/protobuf/drand, type GroupInfo_Url struct, Url string
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, CatchupPeriod uint32
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, DistKey [][]uint8
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, GenesisSeed []uint8
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, GenesisTime uint64
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, Nodes []*drand.Node
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, Period uint32
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, SchemeID string
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, Threshold uint32
pkg github.com/drand/drand/protobuf/drand, type GroupPacket struct, TransitionTime uint64
pkg github.com/drand/drand/protobuf/drand, type GroupRequest struct
pkg github.com/drand/drand/protobuf/drand, type GroupRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type GroupTOMLResponse struct
pkg github.com/drand/drand/protobuf/drand, type GroupTOMLResponse struct, GroupToml string
pkg github.com/drand/drand/protobuf/drand, type GroupTOMLResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type HomeRequest struct
pkg github.com/drand/drand/protobuf/drand, type HomeRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type HomeResponse struct
pkg github.com/drand/drand/protobuf/drand, type HomeResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type HomeResponse struct, Status string
pkg github.com/drand/drand/protobuf/drand, type Identity struct
pkg github.com/drand/drand/protobuf/drand, type Identity struct, Address string
pkg github.com/drand/drand/protobuf/drand, type Identity struct, Key []uint8
pkg github.com/drand/drand/protobuf/drand, type Identity struct, Signature []uint8
pkg github.com/drand/drand/protobuf/drand, type Identity struct, Tls bool
pkg github.com/drand/drand/protobuf/drand, type IdentityRequest struct
pkg github.com/drand/drand/protobuf/drand, type IdentityRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct, Address string
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct, Key []uint8
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct, SchemeName string
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct, Signature []uint8
pkg github.com/drand/drand/protobuf/drand, type IdentityResponse struct, Tls bool
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct, BeaconPeriod uint32
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct, CatchupPeriod uint32
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct, Entropy *drand.EntropyInfo
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct, Info *drand.SetupInfoPacket
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacket struct, SchemeID string
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacketResponse struct
pkg github.com/drand/drand/protobuf/drand, type InitDKGPacketResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type InitResharePacket struct
pkg github.com/drand/drand/protobuf/drand, type InitResharePacket struct, CatchupPeriod uint32
pkg github.com/drand/drand/protobuf/drand, type InitResharePacket struct, CatchupPeriodChanged bool
pkg github.com/drand/drand/protobuf/drand, type InitResharePacket struct, Info *drand.SetupInfoPacket
pkg github.com/drand/drand/protobuf/drand, type InitResharePacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type InitResharePacket struct, Old *drand.GroupInfo
pkg github.com/drand/drand/protobuf/drand, type Interceptors interface { NodeVersionStreamValidator, NodeVersionValidator }
pkg github.com/drand/drand/protobuf/drand, type Interceptors interface, NodeVersionStreamValidator(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error
pkg github.com/drand/drand/protobuf/drand, type Interceptors interface, NodeVersionValidator(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error)
pkg github.com/drand/drand/protobuf/drand, type ListBeaconIDsRequest struct
pkg github.com/drand/drand/protobuf/drand, type ListBeaconIDsRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ListBeaconIDsResponse struct
pkg github.com/drand/drand/protobuf/drand, type ListBeaconIDsResponse struct, Ids []string
pkg github.com/drand/drand/protobuf/drand, type ListBeaconIDsResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ListSchemesRequest struct
pkg github.com/drand/drand/protobuf/drand, type ListSchemesRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ListSchemesResponse struct
pkg github.com/drand/drand/protobuf/drand, type ListSchemesResponse struct, Ids []string
pkg github.com/drand/drand/protobuf/drand, type ListSchemesResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type LoadBeaconRequest struct
pkg github.com/drand/drand/protobuf/drand, type LoadBeaconRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type LoadBeaconResponse struct
pkg github.com/drand/drand/protobuf/drand, type LoadBeaconResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type Node struct
pkg github.com/drand/drand/protobuf/drand, type Node struct, Index uint32
pkg github.com/drand/drand/protobuf/drand, type Node struct, Public *drand.Identity
pkg github.com/drand/drand/protobuf/drand, type PartialBeaconPacket struct
pkg github.com/drand/drand/protobuf/drand, type PartialBeaconPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PartialBeaconPacket struct, PartialSig []uint8
pkg github.com/drand/drand/protobuf/drand, type PartialBeaconPacket struct, PreviousSignature []uint8
pkg github.com/drand/drand/protobuf/drand, type PartialBeaconPacket struct, Round uint64
pkg github.com/drand/drand/protobuf/drand, type Ping struct
pkg github.com/drand/drand/protobuf/drand, type Ping struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type Pong struct
pkg github.com/drand/drand/protobuf/drand, type Pong struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PrivateKeyRequest struct
pkg github.com/drand/drand/protobuf/drand, type PrivateKeyRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PrivateKeyResponse struct
pkg github.com/drand/drand/protobuf/drand, type PrivateKeyResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PrivateKeyResponse struct, PriKey []uint8
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface { BroadcastDKG, GetIdentity, PartialBeacon, PushDKGInfo, SignalDKGParticipant, Status, SyncChain }
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, BroadcastDKG(context.Context, *drand.DKGPacket, ...grpc.CallOption) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, GetIdentity(context.Context, *drand.IdentityRequest, ...grpc.CallOption) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, PartialBeacon(context.Context, *drand.PartialBeaconPacket, ...grpc.CallOption) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, PushDKGInfo(context.Context, *drand.DKGInfoPacket, ...grpc.CallOption) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, SignalDKGParticipant(context.Context, *drand.SignalDKGPacket, ...grpc.CallOption) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, Status(context.Context, *drand.StatusRequest, ...grpc.CallOption) (*drand.StatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolClient interface, SyncChain(context.Context, *drand.SyncRequest, ...grpc.CallOption) (drand.Protocol_SyncChainClient, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface { BroadcastDKG, GetIdentity, PartialBeacon, PushDKGInfo, SignalDKGParticipant, Status, SyncChain }
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/protobuf/drand, type ProtocolServer interface, SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface { CloseSend, Context, Header, Recv, RecvMsg, SendMsg, Trailer }
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, CloseSend() error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, Header() (metadata.MD, error)
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, Recv() (*drand.BeaconPacket, error)
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainClient interface, Trailer() metadata.MD
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface { Context, RecvMsg, Send, SendHeader, SendMsg, SetHeader, SetTrailer }
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, Send(*drand.BeaconPacket) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, SendHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, SetHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Protocol_SyncChainServer interface, SetTrailer(metadata.MD)
pkg github.com/drand/drand/protobuf/drand, type PublicClient interface { ChainInfo, Home, PublicRand, PublicRandStream }
pkg github.com/drand/drand/protobuf/drand, type PublicClient interface, ChainInfo(context.Context, *drand.ChainInfoRequest, ...grpc.CallOption) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/protobuf/drand, type PublicClient interface, Home(context.Context, *drand.HomeRequest, ...grpc.CallOption) (*drand.HomeResponse, error)
pkg github.com/drand/drand/protobuf/drand, type PublicClient interface, PublicRand(context.Context, *drand.PublicRandRequest, ...grpc.CallOption) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/protobuf/drand, type PublicClient interface, PublicRandStream(context.Context, *drand.PublicRandRequest, ...grpc.CallOption) (drand.Public_PublicRandStreamClient, error)
pkg github.com/drand/drand/protobuf/drand, type PublicKeyRequest struct
pkg github.com/drand/drand/protobuf/drand, type PublicKeyRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PublicKeyResponse struct
pkg github.com/drand/drand/protobuf/drand, type PublicKeyResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PublicKeyResponse struct, PubKey []uint8
pkg github.com/drand/drand/protobuf/drand, type PublicRandRequest struct
pkg github.com/drand/drand/protobuf/drand, type PublicRandRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PublicRandRequest struct, Round uint64
pkg github.com/drand/drand/protobuf/drand, type PublicRandResponse struct
pkg github.com/drand/drand/protobuf/drand, type PublicRandResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type PublicRandResponse struct, PreviousSignature []uint8
pkg github.com/drand/drand/protobuf/drand, type PublicRandResponse struct, Randomness []uint8
pkg github.com/drand/drand/protobuf/drand, type PublicRandResponse struct, Round uint64
pkg github.com/drand/drand/protobuf/drand, type PublicRandResponse struct, Signature []uint8
pkg github.com/drand/drand/protobuf/drand, type PublicServer interface { ChainInfo, Home, PublicRand, PublicRandStream }
pkg github.com/drand/drand/protobuf/drand, type PublicServer interface, ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/protobuf/drand, type PublicServer interface, Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/protobuf/drand, type PublicServer interface, PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/protobuf/drand, type PublicServer interface, PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface { CloseSend, Context, Header, Recv, RecvMsg, SendMsg, Trailer }
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, CloseSend() error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, Header() (metadata.MD, error)
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, Recv() (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamClient interface, Trailer() metadata.MD
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface { Context, RecvMsg, Send, SendHeader, SendMsg, SetHeader, SetTrailer }
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, Context() context.Context
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, RecvMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, Send(*drand.PublicRandResponse) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, SendHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, SendMsg(interface{}) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, SetHeader(metadata.MD) error
pkg github.com/drand/drand/protobuf/drand, type Public_PublicRandStreamServer interface, SetTrailer(metadata.MD)
pkg github.com/drand/drand/protobuf/drand, type RemoteStatusRequest struct
pkg github.com/drand/drand/protobuf/drand, type RemoteStatusRequest struct, Addresses []*drand.Address
pkg github.com/drand/drand/protobuf/drand, type RemoteStatusRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type RemoteStatusResponse struct
pkg github.com/drand/drand/protobuf/drand, type RemoteStatusResponse struct, Statuses map[string]*drand.StatusResponse
pkg github.com/drand/drand/protobuf/drand, type ReshareStatus struct
pkg github.com/drand/drand/protobuf/drand, type ReshareStatus struct, Status uint32
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, BeaconOffset uint32
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, DkgOffset uint32
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Force bool
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Leader bool
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, LeaderAddress string
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, LeaderTls bool
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Nodes uint32
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Secret []uint8
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Threshold uint32
pkg github.com/drand/drand/protobuf/drand, type SetupInfoPacket struct, Timeout uint32
pkg github.com/drand/drand/protobuf/drand, type ShareRequest struct
pkg github.com/drand/drand/protobuf/drand, type ShareRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ShareResponse struct
pkg github.com/drand/drand/protobuf/drand, type ShareResponse struct, Index uint32
pkg github.com/drand/drand/protobuf/drand, type ShareResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ShareResponse struct, Share []uint8
pkg github.com/drand/drand/protobuf/drand, type ShutdownRequest struct
pkg github.com/drand/drand/protobuf/drand, type ShutdownRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type ShutdownResponse struct
pkg github.com/drand/drand/protobuf/drand, type ShutdownResponse struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type SignalDKGPacket struct
pkg github.com/drand/drand/protobuf/drand, type SignalDKGPacket struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type SignalDKGPacket struct, Node *drand.Identity
pkg github.com/drand/drand/protobuf/drand, type SignalDKGPacket struct, PreviousGroupHash []uint8
pkg github.com/drand/drand/protobuf/drand, type SignalDKGPacket struct, SecretProof []uint8
pkg github.com/drand/drand/protobuf/drand, type StartSyncRequest struct
pkg github.com/drand/drand/protobuf/drand, type StartSyncRequest struct, InfoHash string
pkg github.com/drand/drand/protobuf/drand, type StartSyncRequest struct, IsTls bool
pkg github.com/drand/drand/protobuf/drand, type StartSyncRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type StartSyncRequest struct, Nodes []string
pkg github.com/drand/drand/protobuf/drand, type StartSyncRequest struct, UpTo uint64
pkg github.com/drand/drand/protobuf/drand, type StatusRequest struct
pkg github.com/drand/drand/protobuf/drand, type StatusRequest struct, CheckConn []*drand.Address
pkg github.com/drand/drand/protobuf/drand, type StatusRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type StatusResponse struct
pkg github.com/drand/drand/protobuf/drand, type StatusResponse struct, Beacon *drand.BeaconStatus
pkg github.com/drand/drand/protobuf/drand, type StatusResponse struct, ChainStore *drand.ChainStoreStatus
pkg github.com/drand/drand/protobuf/drand, type StatusResponse struct, Connections map[string]bool
pkg github.com/drand/drand/protobuf/drand, type StatusResponse struct, Dkg *drand.DkgStatus
pkg github.com/drand/drand/protobuf/drand, type StatusResponse struct, Reshare *drand.ReshareStatus
pkg github.com/drand/drand/protobuf/drand, type SyncProgress struct
pkg github.com/drand/drand/protobuf/drand, type SyncProgress struct, Current uint64
pkg github.com/drand/drand/protobuf/drand, type SyncProgress struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type SyncProgress struct, Target uint64
pkg github.com/drand/drand/protobuf/drand, type SyncRequest struct
pkg github.com/drand/drand/protobuf/drand, type SyncRequest struct, FromRound uint64
pkg github.com/drand/drand/protobuf/drand, type SyncRequest struct, Metadata *common.Metadata
pkg github.com/drand/drand/protobuf/drand, type UnimplementedControlServer struct
pkg github.com/drand/drand/protobuf/drand, type UnimplementedProtocolServer struct
pkg github.com/drand/drand/protobuf/drand, type UnimplementedPublicServer struct
pkg github.com/drand/drand/protobuf/drand, type UnsafeControlServer interface, unexported methods
pkg github.com/drand/drand/protobuf/drand, type UnsafeProtocolServer interface, unexported methods
pkg github.com/drand/drand/protobuf/drand, type UnsafePublicServer interface, unexported methods
pkg github.com/drand/drand/protobuf/drand, var Control_ServiceDesc grpc.ServiceDesc
pkg github.com/drand/drand/protobuf/drand, var File_drand_api_proto protoreflect.FileDescriptor
pkg github.com/drand/drand/protobuf/drand, var File_drand_common_proto protoreflect.FileDescriptor
pkg github.com/drand/drand/protobuf/drand, var File_drand_control_proto protoreflect.FileDescriptor
pkg github.com/drand/drand/protobuf/drand, var File_drand_protocol_proto protoreflect.FileDescriptor
pkg github.com/drand/drand/protobuf/drand, var Protocol_ServiceDesc grpc.ServiceDesc
pkg github.com/drand/drand/protobuf/drand, var Public_ServiceDesc grpc.ServiceDesc
pkg github.com/drand/drand/test, func Addresses(int) []string
pkg github.com/drand/drand/test, func BatchIdentities(int, *crypto.Scheme, string) ([]*key.Pair, *key.Group)
pkg github.com/drand/drand/test, func BatchTLSIdentities(int, *crypto.Scheme, string) ([]*key.Pair, *key.Group)
pkg github.com/drand/drand/test, func ComputeDBName() string
pkg github.com/drand/drand/test, func DumpContainerLogs(string) []uint8
pkg github.com/drand/drand/test, func FreeBind(string) string
pkg github.com/drand/drand/test, func FreePort() string
pkg github.com/drand/drand/test, func GenerateIDs(int) []*key.Pair
pkg github.com/drand/drand/test, func GetBeaconIDFromEnv() string
pkg github.com/drand/drand/test, func ListFromPrivates([]*key.Pair) []*key.Node
pkg github.com/drand/drand/test, func LocalHost() string
pkg github.com/drand/drand/test, func LogLevel(*testing.T) int
pkg github.com/drand/drand/test, func Logger(*testing.T) log.Logger
pkg github.com/drand/drand/test, func NewKeyStore() key.Store
pkg github.com/drand/drand/test, func NewPeer(string) net.Peer
pkg github.com/drand/drand/test, func NewTLSPeer(string) net.Peer
pkg github.com/drand/drand/test, func NewUnit(*testing.T, *test.Container, string) (log.Logger, *sqlx.DB)
pkg github.com/drand/drand/test, func Ports(int) []string
pkg github.com/drand/drand/test, func StartContainer(string, string, ...string) (*test.Container, error)
pkg github.com/drand/drand/test, func StartPGDB() (*test.Container, error)
pkg github.com/drand/drand/test, func StopContainer(string) error
pkg github.com/drand/drand/test, func StopPGDB(*test.Container)
pkg github.com/drand/drand/test, func StringToPoint(string) (kyber.Point, error)
pkg github.com/drand/drand/test, method (*test.KeyStore) LoadDistPublic() (*key.DistPublic, error)
pkg github.com/drand/drand/test, method (*test.KeyStore) LoadGroup() (*key.Group, error)
pkg github.com/drand/drand/test, method (*test.KeyStore) LoadKeyPair(*crypto.Scheme) (*key.Pair, error)
pkg github.com/drand/drand/test, method (*test.KeyStore) LoadShare(*crypto.Scheme) (*key.Share, error)
pkg github.com/drand/drand/test, method (*test.KeyStore) Reset(...key.ResetOption) error
pkg github.com/drand/drand/test, method (*test.KeyStore) SaveDistPublic(*key.DistPublic) error
pkg github.com/drand/drand/test, method (*test.KeyStore) SaveGroup(*key.Group) error
pkg github.com/drand/drand/test, method (*test.KeyStore) SaveKeyPair(*key.Pair) error
pkg github.com/drand/drand/test, method (*test.KeyStore) SaveShare(*key.Share) error
pkg github.com/drand/drand/test, type Container struct
pkg github.com/drand/drand/test, type Container struct, Host string
pkg github.com/drand/drand/test, type Container struct, ID string
pkg github.com/drand/drand/test, type KeyStore struct
pkg github.com/drand/drand/test/context, func PrevSignatureMattersOnContext(*testing.T, context.Context) (context.Context, *crypto.Scheme, bool)
pkg github.com/drand/drand/test/mock, func NewMockBeacon(*testing.T, *crypto.Scheme) (*drand.ChainInfoPacket, *drand.PublicRandResponse)
pkg github.com/drand/drand/test/mock, func NewMockGRPCPublicServer(*testing.T, string, bool, *crypto.Scheme) (net.Listener, net.Service)
pkg github.com/drand/drand/test/mock, func NewMockServer(*testing.T, bool, *crypto.Scheme) net.Service
pkg github.com/drand/drand/test/mock, method (*mock.Server) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/test/mock, method (*mock.Server) EmitRand(bool)
pkg github.com/drand/drand/test/mock, method (*mock.Server) PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/test/mock, method (*mock.Server) PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/test/mock, method (mock.Server) BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) CollectiveKey(context.Context, *drand.CokeyRequest) (*drand.CokeyResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) LoadBeacon(context.Context, *drand.LoadBeaconRequest) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) NodeVersionStreamValidator(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error
pkg github.com/drand/drand/test/mock, method (mock.Server) NodeVersionValidator(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) Share(context.Context, *drand.ShareRequest) (*drand.ShareResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) Shutdown(context.Context, *drand.ShutdownRequest) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/test/mock, method (mock.Server) StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/test/mock, method (mock.Server) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/test/mock, method (mock.Server) SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/test/mock, type Data struct
pkg github.com/drand/drand/test/mock, type Data struct, BadSecondRound bool
pkg github.com/drand/drand/test/mock, type Data struct, Genesis int64
pkg github.com/drand/drand/test/mock, type Data struct, Period time.Duration
pkg github.com/drand/drand/test/mock, type Data struct, PreviousRound int
pkg github.com/drand/drand/test/mock, type Data struct, PreviousSignature string
pkg github.com/drand/drand/test/mock, type Data struct, Public []uint8
pkg github.com/drand/drand/test/mock, type Data struct, Round int
pkg github.com/drand/drand/test/mock, type Data struct, Scheme *crypto.Scheme
pkg github.com/drand/drand/test/mock, type Data struct, Signature string
pkg github.com/drand/drand/test/mock, type MockService interface { EmitRand }
pkg github.com/drand/drand/test/mock, type MockService interface, EmitRand(bool)
pkg github.com/drand/drand/test/mock, type Server struct
pkg github.com/drand/drand/test/mock, type Server struct, embedded *net.EmptyServer
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) BackupDatabase(context.Context, *drand.BackupDBRequest) (*drand.BackupDBResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) BroadcastDKG(context.Context, *drand.DKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) ChainInfo(context.Context, *drand.ChainInfoRequest) (*drand.ChainInfoPacket, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) CollectiveKey(context.Context, *drand.CokeyRequest) (*drand.CokeyResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) GetIdentity(context.Context, *drand.IdentityRequest) (*drand.IdentityResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) GroupFile(context.Context, *drand.GroupRequest) (*drand.GroupPacket, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) Home(context.Context, *drand.HomeRequest) (*drand.HomeResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) InitDKG(context.Context, *drand.InitDKGPacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) InitReshare(context.Context, *drand.InitResharePacket) (*drand.GroupPacket, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) ListBeaconIDs(context.Context, *drand.ListBeaconIDsRequest) (*drand.ListBeaconIDsResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) ListSchemes(context.Context, *drand.ListSchemesRequest) (*drand.ListSchemesResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) LoadBeacon(context.Context, *drand.LoadBeaconRequest) (*drand.LoadBeaconResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) NodeVersionStreamValidator(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) NodeVersionValidator(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PartialBeacon(context.Context, *drand.PartialBeaconPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PingPong(context.Context, *drand.Ping) (*drand.Pong, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PrivateKey(context.Context, *drand.PrivateKeyRequest) (*drand.PrivateKeyResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PublicKey(context.Context, *drand.PublicKeyRequest) (*drand.PublicKeyResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PublicRand(context.Context, *drand.PublicRandRequest) (*drand.PublicRandResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PublicRandStream(*drand.PublicRandRequest, drand.Public_PublicRandStreamServer) error
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) PushDKGInfo(context.Context, *drand.DKGInfoPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) RemoteStatus(context.Context, *drand.RemoteStatusRequest) (*drand.RemoteStatusResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) Share(context.Context, *drand.ShareRequest) (*drand.ShareResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) Shutdown(context.Context, *drand.ShutdownRequest) (*drand.ShutdownResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) SignalDKGParticipant(context.Context, *drand.SignalDKGPacket) (*drand.Empty, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) StartCheckChain(*drand.StartSyncRequest, drand.Control_StartCheckChainServer) error
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) StartFollowChain(*drand.StartSyncRequest, drand.Control_StartFollowChainServer) error
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) Status(context.Context, *drand.StatusRequest) (*drand.StatusResponse, error)
pkg github.com/drand/drand/test/net, method (*net.EmptyServer) SyncChain(*drand.SyncRequest, drand.Protocol_SyncChainServer) error
pkg github.com/drand/drand/test/net, type EmptyServer struct
pkg main, type TestJSON struct
pkg main, type TestJSON struct, API *drand.PublicRandResponse
pkg main, type TestJSON struct, Public string
