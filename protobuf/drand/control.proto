/*
 * This protobuf file contains the definition of the requests and responses
 * used by a drand node to locally run some commands.
 */
syntax = "proto3";

package drand;

option go_package = "github.com/drand/drand/v2/protobuf/drand";

import "drand/common.proto";

service Control {
  // PingPong returns an empty message. Purpose is to test the control port.
  rpc PingPong(Ping) returns (Pong) {}
  // Status responds with the actual status of drand process
  rpc Status(StatusRequest) returns (StatusResponse) {}
  // ListSchemes responds with the list of ids for the available schemes
  rpc ListSchemes(ListSchemesRequest) returns (ListSchemesResponse) {}

  // PublicKey returns the longterm public key of the drand node
  rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) {}

  // ChainInfo returns the chain info for the chain hash or beacon id requested in the metadata
  rpc ChainInfo(drand.ChainInfoRequest) returns (drand.ChainInfoPacket) {}

  // GroupFile returns the TOML-encoded group file, containing the group public key and coefficients
  rpc GroupFile(drand.GroupRequest) returns (drand.GroupPacket) {}

  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}

  rpc LoadBeacon(LoadBeaconRequest) returns (LoadBeaconResponse) {}

  rpc StartFollowChain(StartSyncRequest) returns (stream SyncProgress) {}

  rpc StartCheckChain(StartSyncRequest) returns (stream SyncProgress) {}

  rpc BackupDatabase(BackupDBRequest) returns (BackupDBResponse) {}

  // RemoteStatus request the status of some remote drand nodes
  rpc RemoteStatus(RemoteStatusRequest) returns (RemoteStatusResponse) {}
}

// EntropyInfo contains information about external entropy sources
// can be optional
message EntropyInfo {
  // the path to the script to run that returns random bytes when called
  string script = 1;
  // do we only take this entropy source or mix it with /dev/urandom
  bool userOnly = 10;
  Metadata metadata = 11;
}

message Ping {
  Metadata metadata = 1;
}

message Pong {
  Metadata metadata = 1;
}

// RemoteStatusRequest contains the list of addresses that the local drand node
// process should ask the status to.
message RemoteStatusRequest {
  Metadata metadata = 1;
  repeated Address addresses = 2;
}

// RemoteStatusResponse contains the statuses reponses of all nodes given in the
// requests. If a node did not reply, then the address key is absent from the
// map
message RemoteStatusResponse {
  map<string, StatusResponse> statuses = 1;
}

message ListSchemesRequest {
}

message ListSchemesResponse {
  repeated string ids = 1;
  Metadata metadata = 2;
}



// PublicKeyRequest requests the public key of a drand node for a given Beacon ID
message PublicKeyRequest {
  Metadata metadata = 1;
}

// PublicKeyResponse holds the public key of a drand node
message PublicKeyResponse {
  bytes pubKey = 1;
  string addr = 2;
  bool tls = 3 [deprecated = true];
  bytes signature = 4;
  Metadata metadata = 5;
  string schemeName = 6;
}

message ShutdownRequest {
  Metadata metadata = 1;
}

message ShutdownResponse {
  Metadata metadata = 1;
}

message LoadBeaconRequest {
  Metadata metadata = 1;
}

message LoadBeaconResponse {
  Metadata metadata = 1;
}

message StartSyncRequest {
  // info_hash was deprecated and later removed in favor of the metadata field
  reserved 1;
  // nodes to contact to
  repeated string nodes = 2;
  // is TLS enabled on these nodes or not
  // NOTE currently drand either supports syncing from all TLS or all
  // non-tls nodes
  bool is_tls = 3 [deprecated = true];
  // up_to tells the drand daemon to not sync up after the given round.
  // if up_to is 0, the sync operation continues until it is canceled.
  uint64 up_to = 4;
  Metadata metadata = 5;
}

message SyncProgress {
  uint64 current = 1;
  uint64 target = 2;
  Metadata metadata = 3;
}

message BackupDBRequest {
  string output_file = 1;
  Metadata metadata = 2;
}

message BackupDBResponse {
  Metadata metadata = 1;
}
