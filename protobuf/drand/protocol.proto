/*
 * This protobuf file contains the services and message definitions of all
 * methods used by drand nodes to produce distributed randomness.
 *
*/
syntax = "proto3";

package drand;

option go_package = "github.com/drand/drand/protobuf/drand";
/*option go_package = "drand";*/

import "crypto/dkg/dkg.proto";
import "drand/common.proto";
import "common/common.proto";

service Protocol {
    // GetIdentity returns the identity of the drand node
    rpc GetIdentity(IdentityRequest) returns (IdentityResponse);
    // SignalDKGParticipant is called by non-coordinators nodes that sends their
    // public keys and secret proof they have to the coordinator so that he can
    // create the group.
    rpc SignalDKGParticipant(SignalDKGPacket) returns (drand.Empty);
    // PushDKGInfo is called by the coordinator to push the group he created
    // from all received keys and as well other information such as the time of
    // starting the DKG.
    rpc PushDKGInfo(DKGInfoPacket) returns (drand.Empty);
    // BroadcastPacket is used during DKG phases
    rpc BroadcastDKG(DKGPacket) returns (drand.Empty);
    // PartialBeacon sends its partial beacon to another node
    rpc PartialBeacon(PartialBeaconPacket) returns (drand.Empty);
    // SyncRequest forces a daemon to sync up its chain with other nodes
    rpc SyncChain(SyncRequest) returns (stream BeaconPacket);
    // Status responds with the actual status of drand process
    rpc Status(StatusRequest) returns (StatusResponse) { }
}

message IdentityRequest {
    common.Metadata metadata = 1;
}

message IdentityResponse {
    // REMINDER: This fields should be kept in sync with Identity message
    string address = 1;
    bytes key = 2;
    bool tls = 3;
    // BLS signature over the identity to prove possession of the private key
    bytes signature = 4;
    // --------------

    common.Metadata metadata = 5;
}

// SignalDKGPacket is the packet nodes send to a coordinator that collects all
// keys and setups the group and sends them back to the nodes such that they can
// start the DKG automatically.
message SignalDKGPacket {
    Identity node = 1;
    bytes secret_proof = 2;
    // In resharing cases, previous_group_hash is the hash of the previous group.
    // It is to make sure the nodes build on top of the correct previous group.
    bytes previous_group_hash = 3;
    //
    common.Metadata metadata = 4;
}

// PushDKGInfor is the packet the coordinator sends that contains the group over
// which to run the DKG on, the secret proof (to prove it's he's part of the
// expected group, and it's not a random packet) and as well the time at which
// every node should start the DKG.
message DKGInfoPacket {
    drand.GroupPacket new_group = 1;
    bytes secret_proof = 2;
    // timeout in seconds
    uint32 dkg_timeout = 3;
    // signature from the coordinator to prove he is the one sending that group
    // file.
    bytes signature = 4;
    //
    common.Metadata metadata = 5;
}

message PartialBeaconPacket {
    // Round is the round for which the beacon will be created from the partial
    // signatures
    uint64 round = 1;
    // signature of the previous round - could be removed at some point but now
    // is used to verify the signature even before accessing the store
    bytes previous_sig = 2;
    // partial signature - a threshold of them needs to be aggregated to produce
    // the final beacon at the given round.
    bytes partial_sig = 3;
    //
    common.Metadata metadata = 4;
}

// DKGPacket is the packet that nodes send to others nodes as part of the
// broadcasting protocol.
message DKGPacket{
    dkg.Packet dkg = 1;
    //
    common.Metadata metadata = 2;
}

// SyncRequest is from a node that needs to sync up with the current head of the
// chain
message SyncRequest {
    uint64 from_round = 1;
    //
    common.Metadata metadata = 2;
}

message BeaconPacket {
    bytes previous_sig = 1;
    uint64 round = 2;
    bytes signature = 3;
    common.Metadata metadata = 4;
}
