// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: drand/dkg_control.proto

package drand

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DKGControlClient is the client API for DKGControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DKGControlClient interface {
	Command(ctx context.Context, in *DKGCommand, opts ...grpc.CallOption) (*EmptyResponse, error)
	Packet(ctx context.Context, in *GossipPacket, opts ...grpc.CallOption) (*EmptyResponse, error)
	DKGStatus(ctx context.Context, in *DKGStatusRequest, opts ...grpc.CallOption) (*DKGStatusResponse, error)
	BroadcastDKG(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type dKGControlClient struct {
	cc grpc.ClientConnInterface
}

func NewDKGControlClient(cc grpc.ClientConnInterface) DKGControlClient {
	return &dKGControlClient{cc}
}

func (c *dKGControlClient) Command(ctx context.Context, in *DKGCommand, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) Packet(ctx context.Context, in *GossipPacket, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/Packet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) DKGStatus(ctx context.Context, in *DKGStatusRequest, opts ...grpc.CallOption) (*DKGStatusResponse, error) {
	out := new(DKGStatusResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/DKGStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) BroadcastDKG(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/BroadcastDKG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKGControlServer is the server API for DKGControl service.
// All implementations should embed UnimplementedDKGControlServer
// for forward compatibility
type DKGControlServer interface {
	Command(context.Context, *DKGCommand) (*EmptyResponse, error)
	Packet(context.Context, *GossipPacket) (*EmptyResponse, error)
	DKGStatus(context.Context, *DKGStatusRequest) (*DKGStatusResponse, error)
	BroadcastDKG(context.Context, *DKGPacket) (*EmptyResponse, error)
}

// UnimplementedDKGControlServer should be embedded to have forward compatible implementations.
type UnimplementedDKGControlServer struct {
}

func (UnimplementedDKGControlServer) Command(context.Context, *DKGCommand) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedDKGControlServer) Packet(context.Context, *GossipPacket) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Packet not implemented")
}
func (UnimplementedDKGControlServer) DKGStatus(context.Context, *DKGStatusRequest) (*DKGStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DKGStatus not implemented")
}
func (UnimplementedDKGControlServer) BroadcastDKG(context.Context, *DKGPacket) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastDKG not implemented")
}

// UnsafeDKGControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DKGControlServer will
// result in compilation errors.
type UnsafeDKGControlServer interface {
	mustEmbedUnimplementedDKGControlServer()
}

func RegisterDKGControlServer(s grpc.ServiceRegistrar, srv DKGControlServer) {
	s.RegisterService(&DKGControl_ServiceDesc, srv)
}

func _DKGControl_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).Command(ctx, req.(*DKGCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_Packet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).Packet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/Packet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).Packet(ctx, req.(*GossipPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_DKGStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).DKGStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/DKGStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).DKGStatus(ctx, req.(*DKGStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_BroadcastDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).BroadcastDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/BroadcastDKG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).BroadcastDKG(ctx, req.(*DKGPacket))
	}
	return interceptor(ctx, in, info, handler)
}

// DKGControl_ServiceDesc is the grpc.ServiceDesc for DKGControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DKGControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drand.DKGControl",
	HandlerType: (*DKGControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command",
			Handler:    _DKGControl_Command_Handler,
		},
		{
			MethodName: "Packet",
			Handler:    _DKGControl_Packet_Handler,
		},
		{
			MethodName: "DKGStatus",
			Handler:    _DKGControl_DKGStatus_Handler,
		},
		{
			MethodName: "BroadcastDKG",
			Handler:    _DKGControl_BroadcastDKG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/dkg_control.proto",
}
