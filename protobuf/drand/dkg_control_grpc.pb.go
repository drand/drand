// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: drand/dkg_control.proto

package drand

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DKGControlClient is the client API for DKGControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DKGControlClient interface {
	StartNetwork(ctx context.Context, in *FirstProposalOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	StartProposal(ctx context.Context, in *ProposalOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	StartAbort(ctx context.Context, in *AbortOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	StartExecute(ctx context.Context, in *ExecutionOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	StartJoin(ctx context.Context, in *JoinOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	StartAccept(ctx context.Context, in *AcceptOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	StartReject(ctx context.Context, in *RejectOptions, opts ...grpc.CallOption) (*EmptyResponse, error)
	DKGStatus(ctx context.Context, in *DKGStatusRequest, opts ...grpc.CallOption) (*DKGStatusResponse, error)
}

type dKGControlClient struct {
	cc grpc.ClientConnInterface
}

func NewDKGControlClient(cc grpc.ClientConnInterface) DKGControlClient {
	return &dKGControlClient{cc}
}

func (c *dKGControlClient) StartNetwork(ctx context.Context, in *FirstProposalOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) StartProposal(ctx context.Context, in *ProposalOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) StartAbort(ctx context.Context, in *AbortOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) StartExecute(ctx context.Context, in *ExecutionOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) StartJoin(ctx context.Context, in *JoinOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) StartAccept(ctx context.Context, in *AcceptOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) StartReject(ctx context.Context, in *RejectOptions, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/StartReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGControlClient) DKGStatus(ctx context.Context, in *DKGStatusRequest, opts ...grpc.CallOption) (*DKGStatusResponse, error) {
	out := new(DKGStatusResponse)
	err := c.cc.Invoke(ctx, "/drand.DKGControl/DKGStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKGControlServer is the server API for DKGControl service.
// All implementations should embed UnimplementedDKGControlServer
// for forward compatibility
type DKGControlServer interface {
	StartNetwork(context.Context, *FirstProposalOptions) (*EmptyResponse, error)
	StartProposal(context.Context, *ProposalOptions) (*EmptyResponse, error)
	StartAbort(context.Context, *AbortOptions) (*EmptyResponse, error)
	StartExecute(context.Context, *ExecutionOptions) (*EmptyResponse, error)
	StartJoin(context.Context, *JoinOptions) (*EmptyResponse, error)
	StartAccept(context.Context, *AcceptOptions) (*EmptyResponse, error)
	StartReject(context.Context, *RejectOptions) (*EmptyResponse, error)
	DKGStatus(context.Context, *DKGStatusRequest) (*DKGStatusResponse, error)
}

// UnimplementedDKGControlServer should be embedded to have forward compatible implementations.
type UnimplementedDKGControlServer struct {
}

func (UnimplementedDKGControlServer) StartNetwork(context.Context, *FirstProposalOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNetwork not implemented")
}
func (UnimplementedDKGControlServer) StartProposal(context.Context, *ProposalOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProposal not implemented")
}
func (UnimplementedDKGControlServer) StartAbort(context.Context, *AbortOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAbort not implemented")
}
func (UnimplementedDKGControlServer) StartExecute(context.Context, *ExecutionOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExecute not implemented")
}
func (UnimplementedDKGControlServer) StartJoin(context.Context, *JoinOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJoin not implemented")
}
func (UnimplementedDKGControlServer) StartAccept(context.Context, *AcceptOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAccept not implemented")
}
func (UnimplementedDKGControlServer) StartReject(context.Context, *RejectOptions) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReject not implemented")
}
func (UnimplementedDKGControlServer) DKGStatus(context.Context, *DKGStatusRequest) (*DKGStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DKGStatus not implemented")
}

// UnsafeDKGControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DKGControlServer will
// result in compilation errors.
type UnsafeDKGControlServer interface {
	mustEmbedUnimplementedDKGControlServer()
}

func RegisterDKGControlServer(s grpc.ServiceRegistrar, srv DKGControlServer) {
	s.RegisterService(&DKGControl_ServiceDesc, srv)
}

func _DKGControl_StartNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstProposalOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartNetwork(ctx, req.(*FirstProposalOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_StartProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartProposal(ctx, req.(*ProposalOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_StartAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartAbort(ctx, req.(*AbortOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_StartExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartExecute(ctx, req.(*ExecutionOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_StartJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartJoin(ctx, req.(*JoinOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_StartAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartAccept(ctx, req.(*AcceptOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_StartReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).StartReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/StartReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).StartReject(ctx, req.(*RejectOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKGControl_DKGStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGControlServer).DKGStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKGControl/DKGStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGControlServer).DKGStatus(ctx, req.(*DKGStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DKGControl_ServiceDesc is the grpc.ServiceDesc for DKGControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DKGControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drand.DKGControl",
	HandlerType: (*DKGControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartNetwork",
			Handler:    _DKGControl_StartNetwork_Handler,
		},
		{
			MethodName: "StartProposal",
			Handler:    _DKGControl_StartProposal_Handler,
		},
		{
			MethodName: "StartAbort",
			Handler:    _DKGControl_StartAbort_Handler,
		},
		{
			MethodName: "StartExecute",
			Handler:    _DKGControl_StartExecute_Handler,
		},
		{
			MethodName: "StartJoin",
			Handler:    _DKGControl_StartJoin_Handler,
		},
		{
			MethodName: "StartAccept",
			Handler:    _DKGControl_StartAccept_Handler,
		},
		{
			MethodName: "StartReject",
			Handler:    _DKGControl_StartReject_Handler,
		},
		{
			MethodName: "DKGStatus",
			Handler:    _DKGControl_DKGStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/dkg_control.proto",
}

// DKGClient is the client API for DKG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DKGClient interface {
	Propose(ctx context.Context, in *ProposalTerms, opts ...grpc.CallOption) (*EmptyResponse, error)
	Abort(ctx context.Context, in *AbortDKG, opts ...grpc.CallOption) (*EmptyResponse, error)
	Execute(ctx context.Context, in *StartExecution, opts ...grpc.CallOption) (*EmptyResponse, error)
	Accept(ctx context.Context, in *AcceptProposal, opts ...grpc.CallOption) (*EmptyResponse, error)
	Reject(ctx context.Context, in *RejectProposal, opts ...grpc.CallOption) (*EmptyResponse, error)
	// BroadcastPacket is used during DKG phases
	BroadcastDKG(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type dKGClient struct {
	cc grpc.ClientConnInterface
}

func NewDKGClient(cc grpc.ClientConnInterface) DKGClient {
	return &dKGClient{cc}
}

func (c *dKGClient) Propose(ctx context.Context, in *ProposalTerms, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKG/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Abort(ctx context.Context, in *AbortDKG, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKG/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Execute(ctx context.Context, in *StartExecution, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKG/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Accept(ctx context.Context, in *AcceptProposal, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKG/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) Reject(ctx context.Context, in *RejectProposal, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKG/Reject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dKGClient) BroadcastDKG(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/drand.DKG/BroadcastDKG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DKGServer is the server API for DKG service.
// All implementations should embed UnimplementedDKGServer
// for forward compatibility
type DKGServer interface {
	Propose(context.Context, *ProposalTerms) (*EmptyResponse, error)
	Abort(context.Context, *AbortDKG) (*EmptyResponse, error)
	Execute(context.Context, *StartExecution) (*EmptyResponse, error)
	Accept(context.Context, *AcceptProposal) (*EmptyResponse, error)
	Reject(context.Context, *RejectProposal) (*EmptyResponse, error)
	// BroadcastPacket is used during DKG phases
	BroadcastDKG(context.Context, *DKGPacket) (*EmptyResponse, error)
}

// UnimplementedDKGServer should be embedded to have forward compatible implementations.
type UnimplementedDKGServer struct {
}

func (UnimplementedDKGServer) Propose(context.Context, *ProposalTerms) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedDKGServer) Abort(context.Context, *AbortDKG) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedDKGServer) Execute(context.Context, *StartExecution) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDKGServer) Accept(context.Context, *AcceptProposal) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedDKGServer) Reject(context.Context, *RejectProposal) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedDKGServer) BroadcastDKG(context.Context, *DKGPacket) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastDKG not implemented")
}

// UnsafeDKGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DKGServer will
// result in compilation errors.
type UnsafeDKGServer interface {
	mustEmbedUnimplementedDKGServer()
}

func RegisterDKGServer(s grpc.ServiceRegistrar, srv DKGServer) {
	s.RegisterService(&DKG_ServiceDesc, srv)
}

func _DKG_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalTerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKG/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Propose(ctx, req.(*ProposalTerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortDKG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKG/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Abort(ctx, req.(*AbortDKG))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExecution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKG/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Execute(ctx, req.(*StartExecution))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKG/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Accept(ctx, req.(*AcceptProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKG/Reject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).Reject(ctx, req.(*RejectProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _DKG_BroadcastDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DKGServer).BroadcastDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.DKG/BroadcastDKG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DKGServer).BroadcastDKG(ctx, req.(*DKGPacket))
	}
	return interceptor(ctx, in, info, handler)
}

// DKG_ServiceDesc is the grpc.ServiceDesc for DKG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DKG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drand.DKG",
	HandlerType: (*DKGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _DKG_Propose_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _DKG_Abort_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DKG_Execute_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _DKG_Accept_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _DKG_Reject_Handler,
		},
		{
			MethodName: "BroadcastDKG",
			Handler:    _DKG_BroadcastDKG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/dkg_control.proto",
}
