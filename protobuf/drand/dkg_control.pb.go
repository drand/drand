// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: drand/dkg_control.proto

package drand

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	dkg "github.com/drand/drand/protobuf/crypto/dkg"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FirstProposalOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID             string                 `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	Timeout              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Threshold            uint32                 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	PeriodSeconds        uint32                 `protobuf:"varint,4,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
	Scheme               string                 `protobuf:"bytes,5,opt,name=scheme,proto3" json:"scheme,omitempty"`
	CatchupPeriodSeconds uint32                 `protobuf:"varint,6,opt,name=catchup_period_seconds,json=catchupPeriodSeconds,proto3" json:"catchup_period_seconds,omitempty"`
	GenesisTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	Joining              []*Participant         `protobuf:"bytes,8,rep,name=joining,proto3" json:"joining,omitempty"`
}

func (x *FirstProposalOptions) Reset() {
	*x = FirstProposalOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstProposalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstProposalOptions) ProtoMessage() {}

func (x *FirstProposalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstProposalOptions.ProtoReflect.Descriptor instead.
func (*FirstProposalOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{0}
}

func (x *FirstProposalOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *FirstProposalOptions) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *FirstProposalOptions) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *FirstProposalOptions) GetPeriodSeconds() uint32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *FirstProposalOptions) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *FirstProposalOptions) GetCatchupPeriodSeconds() uint32 {
	if x != nil {
		return x.CatchupPeriodSeconds
	}
	return 0
}

func (x *FirstProposalOptions) GetGenesisTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenesisTime
	}
	return nil
}

func (x *FirstProposalOptions) GetJoining() []*Participant {
	if x != nil {
		return x.Joining
	}
	return nil
}

type ProposalOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID             string                 `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	Timeout              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Threshold            uint32                 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	CatchupPeriodSeconds uint32                 `protobuf:"varint,4,opt,name=catchup_period_seconds,json=catchupPeriodSeconds,proto3" json:"catchup_period_seconds,omitempty"`
	TransitionTime       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=transition_time,json=transitionTime,proto3" json:"transition_time,omitempty"`
	Joining              []*Participant         `protobuf:"bytes,6,rep,name=joining,proto3" json:"joining,omitempty"`
	Leaving              []*Participant         `protobuf:"bytes,7,rep,name=leaving,proto3" json:"leaving,omitempty"`
	Remaining            []*Participant         `protobuf:"bytes,8,rep,name=remaining,proto3" json:"remaining,omitempty"`
}

func (x *ProposalOptions) Reset() {
	*x = ProposalOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalOptions) ProtoMessage() {}

func (x *ProposalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalOptions.ProtoReflect.Descriptor instead.
func (*ProposalOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{1}
}

func (x *ProposalOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *ProposalOptions) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ProposalOptions) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ProposalOptions) GetCatchupPeriodSeconds() uint32 {
	if x != nil {
		return x.CatchupPeriodSeconds
	}
	return 0
}

func (x *ProposalOptions) GetTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransitionTime
	}
	return nil
}

func (x *ProposalOptions) GetJoining() []*Participant {
	if x != nil {
		return x.Joining
	}
	return nil
}

func (x *ProposalOptions) GetLeaving() []*Participant {
	if x != nil {
		return x.Leaving
	}
	return nil
}

func (x *ProposalOptions) GetRemaining() []*Participant {
	if x != nil {
		return x.Remaining
	}
	return nil
}

type AbortOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
}

func (x *AbortOptions) Reset() {
	*x = AbortOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortOptions) ProtoMessage() {}

func (x *AbortOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortOptions.ProtoReflect.Descriptor instead.
func (*AbortOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{2}
}

func (x *AbortOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

type ExecutionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
}

func (x *ExecutionOptions) Reset() {
	*x = ExecutionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOptions) ProtoMessage() {}

func (x *ExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOptions.ProtoReflect.Descriptor instead.
func (*ExecutionOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

type JoinOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID  string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	GroupFile []byte `protobuf:"bytes,2,opt,name=groupFile,proto3" json:"groupFile,omitempty"`
}

func (x *JoinOptions) Reset() {
	*x = JoinOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinOptions) ProtoMessage() {}

func (x *JoinOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinOptions.ProtoReflect.Descriptor instead.
func (*JoinOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{4}
}

func (x *JoinOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *JoinOptions) GetGroupFile() []byte {
	if x != nil {
		return x.GroupFile
	}
	return nil
}

type AcceptOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
}

func (x *AcceptOptions) Reset() {
	*x = AcceptOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptOptions) ProtoMessage() {}

func (x *AcceptOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptOptions.ProtoReflect.Descriptor instead.
func (*AcceptOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{5}
}

func (x *AcceptOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

type RejectOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
}

func (x *RejectOptions) Reset() {
	*x = RejectOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectOptions) ProtoMessage() {}

func (x *RejectOptions) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectOptions.ProtoReflect.Descriptor instead.
func (*RejectOptions) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{6}
}

func (x *RejectOptions) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{7}
}

type InitialProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID  string       `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	Epoch     uint32       `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Leader    *Participant `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	Threshold uint32       `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// the time at which the proposal can be automatically cancelled if the leader
	// has not kicked off execution
	ProposalTimeout *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=proposal_timeout,json=proposalTimeout,proto3" json:"proposal_timeout,omitempty"`
	// the minimum beacon period when in catchup
	CatchupPeriod uint32 `protobuf:"varint,6,opt,name=catchup_period,json=catchupPeriod,proto3" json:"catchup_period,omitempty"`
	// the period time of the beacon in seconds.
	BeaconPeriod uint32 `protobuf:"varint,7,opt,name=beacon_period,json=beaconPeriod,proto3" json:"beacon_period,omitempty"`
	// the cryptographic (and protocol) scheme used to generate randomness beacons
	// used only in a fresh dkg
	SchemeID uint32 `protobuf:"varint,8,opt,name=schemeID,proto3" json:"schemeID,omitempty"`
	// the start time of the network
	GenesisTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// a list of the participants taking part in the initial DKG
	Joining []*Participant `protobuf:"bytes,10,rep,name=joining,proto3" json:"joining,omitempty"`
}

func (x *InitialProposal) Reset() {
	*x = InitialProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialProposal) ProtoMessage() {}

func (x *InitialProposal) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialProposal.ProtoReflect.Descriptor instead.
func (*InitialProposal) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{8}
}

func (x *InitialProposal) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *InitialProposal) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *InitialProposal) GetLeader() *Participant {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *InitialProposal) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *InitialProposal) GetProposalTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.ProposalTimeout
	}
	return nil
}

func (x *InitialProposal) GetCatchupPeriod() uint32 {
	if x != nil {
		return x.CatchupPeriod
	}
	return 0
}

func (x *InitialProposal) GetBeaconPeriod() uint32 {
	if x != nil {
		return x.BeaconPeriod
	}
	return 0
}

func (x *InitialProposal) GetSchemeID() uint32 {
	if x != nil {
		return x.SchemeID
	}
	return 0
}

func (x *InitialProposal) GetGenesisTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenesisTime
	}
	return nil
}

func (x *InitialProposal) GetJoining() []*Participant {
	if x != nil {
		return x.Joining
	}
	return nil
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID  string       `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	Epoch     uint32       `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Leader    *Participant `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	Threshold uint32       `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// the time at which the proposal can be automatically cancelled if the leader
	// has not kicked off execution
	Timeout *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// the time at which a DKG should go live
	TransitionTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=transition_time,json=transitionTime,proto3" json:"transition_time,omitempty"`
	// a list of the participants joining for this epoch
	Joining []*Participant `protobuf:"bytes,7,rep,name=joining,proto3" json:"joining,omitempty"`
	// a list of the participants from the current epoch that will remain for the next epoch
	Remaining []*Participant `protobuf:"bytes,8,rep,name=remaining,proto3" json:"remaining,omitempty"`
	// a list of the participants from the current epoch that will leave for the next epoch
	Leaving []*Participant `protobuf:"bytes,9,rep,name=leaving,proto3" json:"leaving,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{9}
}

func (x *Proposal) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *Proposal) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Proposal) GetLeader() *Participant {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *Proposal) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Proposal) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Proposal) GetTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransitionTime
	}
	return nil
}

func (x *Proposal) GetJoining() []*Participant {
	if x != nil {
		return x.Joining
	}
	return nil
}

func (x *Proposal) GetRemaining() []*Participant {
	if x != nil {
		return x.Remaining
	}
	return nil
}

func (x *Proposal) GetLeaving() []*Participant {
	if x != nil {
		return x.Leaving
	}
	return nil
}

type ProposalTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID             string                 `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	Epoch                uint32                 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Leader               *Participant           `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	Threshold            uint32                 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Timeout              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CatchupPeriodSeconds uint32                 `protobuf:"varint,6,opt,name=catchup_period_seconds,json=catchupPeriodSeconds,proto3" json:"catchup_period_seconds,omitempty"`
	BeaconPeriodSeconds  uint32                 `protobuf:"varint,7,opt,name=beacon_period_seconds,json=beaconPeriodSeconds,proto3" json:"beacon_period_seconds,omitempty"`
	SchemeID             string                 `protobuf:"bytes,8,opt,name=schemeID,proto3" json:"schemeID,omitempty"`
	GenesisTime          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	GenesisSeed          []byte                 `protobuf:"bytes,10,opt,name=genesis_seed,json=genesisSeed,proto3" json:"genesis_seed,omitempty"` // joiners require this as they don't have the original group file to generate it
	TransitionTime       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=transition_time,json=transitionTime,proto3" json:"transition_time,omitempty"`
	Joining              []*Participant         `protobuf:"bytes,12,rep,name=joining,proto3" json:"joining,omitempty"`
	Remaining            []*Participant         `protobuf:"bytes,13,rep,name=remaining,proto3" json:"remaining,omitempty"`
	Leaving              []*Participant         `protobuf:"bytes,14,rep,name=leaving,proto3" json:"leaving,omitempty"`
}

func (x *ProposalTerms) Reset() {
	*x = ProposalTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalTerms) ProtoMessage() {}

func (x *ProposalTerms) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalTerms.ProtoReflect.Descriptor instead.
func (*ProposalTerms) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{10}
}

func (x *ProposalTerms) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *ProposalTerms) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ProposalTerms) GetLeader() *Participant {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *ProposalTerms) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ProposalTerms) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ProposalTerms) GetCatchupPeriodSeconds() uint32 {
	if x != nil {
		return x.CatchupPeriodSeconds
	}
	return 0
}

func (x *ProposalTerms) GetBeaconPeriodSeconds() uint32 {
	if x != nil {
		return x.BeaconPeriodSeconds
	}
	return 0
}

func (x *ProposalTerms) GetSchemeID() string {
	if x != nil {
		return x.SchemeID
	}
	return ""
}

func (x *ProposalTerms) GetGenesisTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenesisTime
	}
	return nil
}

func (x *ProposalTerms) GetGenesisSeed() []byte {
	if x != nil {
		return x.GenesisSeed
	}
	return nil
}

func (x *ProposalTerms) GetTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransitionTime
	}
	return nil
}

func (x *ProposalTerms) GetJoining() []*Participant {
	if x != nil {
		return x.Joining
	}
	return nil
}

func (x *ProposalTerms) GetRemaining() []*Participant {
	if x != nil {
		return x.Remaining
	}
	return nil
}

func (x *ProposalTerms) GetLeaving() []*Participant {
	if x != nil {
		return x.Leaving
	}
	return nil
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Tls       bool   `protobuf:"varint,2,opt,name=tls,proto3" json:"tls,omitempty"`
	PubKey    []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{11}
}

func (x *Participant) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Participant) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *Participant) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Participant) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AcceptProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acceptor *Participant `protobuf:"bytes,1,opt,name=acceptor,proto3" json:"acceptor,omitempty"`
	Metadata *DKGMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AcceptProposal) Reset() {
	*x = AcceptProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptProposal) ProtoMessage() {}

func (x *AcceptProposal) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptProposal.ProtoReflect.Descriptor instead.
func (*AcceptProposal) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{12}
}

func (x *AcceptProposal) GetAcceptor() *Participant {
	if x != nil {
		return x.Acceptor
	}
	return nil
}

func (x *AcceptProposal) GetMetadata() *DKGMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RejectProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the person rejecting the proposal
	Rejector *Participant `protobuf:"bytes,1,opt,name=rejector,proto3" json:"rejector,omitempty"`
	// the reason for rejection, if applicable
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // signature over the proposal message that's being accepted
	// used to authenticate the user
	Secret []byte `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	// In resharing cases, previous_group_hash is the hash of the previous group.
	// It is to make sure the nodes build on top of the correct previous group.
	PreviousGroupHash []byte `protobuf:"bytes,4,opt,name=previous_group_hash,json=previousGroupHash,proto3" json:"previous_group_hash,omitempty"`
	// a sha256 hash of the original proposal message
	ProposalHash []byte       `protobuf:"bytes,5,opt,name=proposal_hash,json=proposalHash,proto3" json:"proposal_hash,omitempty"`
	Metadata     *DKGMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RejectProposal) Reset() {
	*x = RejectProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectProposal) ProtoMessage() {}

func (x *RejectProposal) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectProposal.ProtoReflect.Descriptor instead.
func (*RejectProposal) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{13}
}

func (x *RejectProposal) GetRejector() *Participant {
	if x != nil {
		return x.Rejector
	}
	return nil
}

func (x *RejectProposal) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RejectProposal) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *RejectProposal) GetPreviousGroupHash() []byte {
	if x != nil {
		return x.PreviousGroupHash
	}
	return nil
}

func (x *RejectProposal) GetProposalHash() []byte {
	if x != nil {
		return x.ProposalHash
	}
	return nil
}

func (x *RejectProposal) GetMetadata() *DKGMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AbortDKG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason   string       `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Metadata *DKGMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AbortDKG) Reset() {
	*x = AbortDKG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortDKG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortDKG) ProtoMessage() {}

func (x *AbortDKG) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortDKG.ProtoReflect.Descriptor instead.
func (*AbortDKG) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{14}
}

func (x *AbortDKG) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AbortDKG) GetMetadata() *DKGMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StartExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DKGMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StartExecution) Reset() {
	*x = StartExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExecution) ProtoMessage() {}

func (x *StartExecution) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExecution.ProtoReflect.Descriptor instead.
func (*StartExecution) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{15}
}

func (x *StartExecution) GetMetadata() *DKGMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DKGMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
}

func (x *DKGMetadata) Reset() {
	*x = DKGMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGMetadata) ProtoMessage() {}

func (x *DKGMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGMetadata.ProtoReflect.Descriptor instead.
func (*DKGMetadata) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{16}
}

func (x *DKGMetadata) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

type DKGStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
}

func (x *DKGStatusRequest) Reset() {
	*x = DKGStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGStatusRequest) ProtoMessage() {}

func (x *DKGStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGStatusRequest.ProtoReflect.Descriptor instead.
func (*DKGStatusRequest) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{17}
}

func (x *DKGStatusRequest) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

type DKGStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Complete *DKGEntry `protobuf:"bytes,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Current  *DKGEntry `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *DKGStatusResponse) Reset() {
	*x = DKGStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGStatusResponse) ProtoMessage() {}

func (x *DKGStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGStatusResponse.ProtoReflect.Descriptor instead.
func (*DKGStatusResponse) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{18}
}

func (x *DKGStatusResponse) GetComplete() *DKGEntry {
	if x != nil {
		return x.Complete
	}
	return nil
}

func (x *DKGStatusResponse) GetCurrent() *DKGEntry {
	if x != nil {
		return x.Current
	}
	return nil
}

type DKGEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID       string                 `protobuf:"bytes,1,opt,name=beaconID,proto3" json:"beaconID,omitempty"`
	State          uint32                 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Epoch          uint32                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Threshold      uint32                 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Timeout        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	GenesisTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	TransitionTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=transition_time,json=transitionTime,proto3" json:"transition_time,omitempty"`
	GenesisSeed    []byte                 `protobuf:"bytes,8,opt,name=genesis_seed,json=genesisSeed,proto3" json:"genesis_seed,omitempty"`
	Leader         *Participant           `protobuf:"bytes,9,opt,name=leader,proto3" json:"leader,omitempty"`
	Remaining      []*Participant         `protobuf:"bytes,10,rep,name=remaining,proto3" json:"remaining,omitempty"`
	Joining        []*Participant         `protobuf:"bytes,11,rep,name=joining,proto3" json:"joining,omitempty"`
	Leaving        []*Participant         `protobuf:"bytes,12,rep,name=leaving,proto3" json:"leaving,omitempty"`
	Acceptors      []*Participant         `protobuf:"bytes,13,rep,name=acceptors,proto3" json:"acceptors,omitempty"`
	Rejectors      []*Participant         `protobuf:"bytes,14,rep,name=rejectors,proto3" json:"rejectors,omitempty"`
	FinalGroup     []string               `protobuf:"bytes,15,rep,name=finalGroup,proto3" json:"finalGroup,omitempty"`
}

func (x *DKGEntry) Reset() {
	*x = DKGEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGEntry) ProtoMessage() {}

func (x *DKGEntry) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGEntry.ProtoReflect.Descriptor instead.
func (*DKGEntry) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{19}
}

func (x *DKGEntry) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *DKGEntry) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DKGEntry) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *DKGEntry) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *DKGEntry) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *DKGEntry) GetGenesisTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenesisTime
	}
	return nil
}

func (x *DKGEntry) GetTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransitionTime
	}
	return nil
}

func (x *DKGEntry) GetGenesisSeed() []byte {
	if x != nil {
		return x.GenesisSeed
	}
	return nil
}

func (x *DKGEntry) GetLeader() *Participant {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *DKGEntry) GetRemaining() []*Participant {
	if x != nil {
		return x.Remaining
	}
	return nil
}

func (x *DKGEntry) GetJoining() []*Participant {
	if x != nil {
		return x.Joining
	}
	return nil
}

func (x *DKGEntry) GetLeaving() []*Participant {
	if x != nil {
		return x.Leaving
	}
	return nil
}

func (x *DKGEntry) GetAcceptors() []*Participant {
	if x != nil {
		return x.Acceptors
	}
	return nil
}

func (x *DKGEntry) GetRejectors() []*Participant {
	if x != nil {
		return x.Rejectors
	}
	return nil
}

func (x *DKGEntry) GetFinalGroup() []string {
	if x != nil {
		return x.FinalGroup
	}
	return nil
}

// DKGPacket is the packet that nodes send to others nodes as part of the
// broadcasting protocol.
type DKGPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dkg      *dkg.Packet  `protobuf:"bytes,1,opt,name=dkg,proto3" json:"dkg,omitempty"`
	Metadata *DKGMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DKGPacket) Reset() {
	*x = DKGPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_dkg_control_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DKGPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DKGPacket) ProtoMessage() {}

func (x *DKGPacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_dkg_control_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DKGPacket.ProtoReflect.Descriptor instead.
func (*DKGPacket) Descriptor() ([]byte, []int) {
	return file_drand_dkg_control_proto_rawDescGZIP(), []int{20}
}

func (x *DKGPacket) GetDkg() *dkg.Packet {
	if x != nil {
		return x.Dkg
	}
	return nil
}

func (x *DKGPacket) GetMetadata() *DKGMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_drand_dkg_control_proto protoreflect.FileDescriptor

var file_drand_dkg_control_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x64, 0x6b, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x64, 0x6b, 0x67, 0x2f, 0x64, 0x6b,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0x8a, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x2a, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x10, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x0b, 0x4a,
	0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x2b, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x0f,
	0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa9, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x45, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x3d,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x8f, 0x03, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x22, 0xfc, 0x04,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x65, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x22, 0x6f, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x70, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xf5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x44, 0x4b, 0x47, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x08, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x44, 0x4b, 0x47, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a,
	0x0b, 0x44, 0x4b, 0x47, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x10, 0x44, 0x4b, 0x47, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x11, 0x44, 0x4b, 0x47, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x05, 0x0a, 0x08, 0x44, 0x4b, 0x47, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x53, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12,
	0x30, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x5a, 0x0a, 0x09, 0x44, 0x4b, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x03, 0x64, 0x6b, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x64, 0x6b, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x03, 0x64, 0x6b, 0x67, 0x12,
	0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x83, 0x04, 0x0a, 0x0a, 0x44, 0x4b, 0x47, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x43,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x44, 0x4b, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x44, 0x4b, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd6, 0x02, 0x0a, 0x03, 0x44, 0x4b, 0x47, 0x12, 0x37, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x14,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12,
	0x0f, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x44, 0x4b, 0x47,
	0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x15, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x1a, 0x14, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x44, 0x4b, 0x47, 0x12, 0x10, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x4b, 0x47,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x27,
	0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72, 0x61,
	0x6e, 0x64, 0x2f, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drand_dkg_control_proto_rawDescOnce sync.Once
	file_drand_dkg_control_proto_rawDescData = file_drand_dkg_control_proto_rawDesc
)

func file_drand_dkg_control_proto_rawDescGZIP() []byte {
	file_drand_dkg_control_proto_rawDescOnce.Do(func() {
		file_drand_dkg_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_drand_dkg_control_proto_rawDescData)
	})
	return file_drand_dkg_control_proto_rawDescData
}

var file_drand_dkg_control_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_drand_dkg_control_proto_goTypes = []interface{}{
	(*FirstProposalOptions)(nil),  // 0: drand.FirstProposalOptions
	(*ProposalOptions)(nil),       // 1: drand.ProposalOptions
	(*AbortOptions)(nil),          // 2: drand.AbortOptions
	(*ExecutionOptions)(nil),      // 3: drand.ExecutionOptions
	(*JoinOptions)(nil),           // 4: drand.JoinOptions
	(*AcceptOptions)(nil),         // 5: drand.AcceptOptions
	(*RejectOptions)(nil),         // 6: drand.RejectOptions
	(*EmptyResponse)(nil),         // 7: drand.EmptyResponse
	(*InitialProposal)(nil),       // 8: drand.InitialProposal
	(*Proposal)(nil),              // 9: drand.Proposal
	(*ProposalTerms)(nil),         // 10: drand.ProposalTerms
	(*Participant)(nil),           // 11: drand.Participant
	(*AcceptProposal)(nil),        // 12: drand.AcceptProposal
	(*RejectProposal)(nil),        // 13: drand.RejectProposal
	(*AbortDKG)(nil),              // 14: drand.AbortDKG
	(*StartExecution)(nil),        // 15: drand.StartExecution
	(*DKGMetadata)(nil),           // 16: drand.DKGMetadata
	(*DKGStatusRequest)(nil),      // 17: drand.DKGStatusRequest
	(*DKGStatusResponse)(nil),     // 18: drand.DKGStatusResponse
	(*DKGEntry)(nil),              // 19: drand.DKGEntry
	(*DKGPacket)(nil),             // 20: drand.DKGPacket
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*dkg.Packet)(nil),            // 22: dkg.Packet
}
var file_drand_dkg_control_proto_depIdxs = []int32{
	21, // 0: drand.FirstProposalOptions.timeout:type_name -> google.protobuf.Timestamp
	21, // 1: drand.FirstProposalOptions.genesis_time:type_name -> google.protobuf.Timestamp
	11, // 2: drand.FirstProposalOptions.joining:type_name -> drand.Participant
	21, // 3: drand.ProposalOptions.timeout:type_name -> google.protobuf.Timestamp
	21, // 4: drand.ProposalOptions.transition_time:type_name -> google.protobuf.Timestamp
	11, // 5: drand.ProposalOptions.joining:type_name -> drand.Participant
	11, // 6: drand.ProposalOptions.leaving:type_name -> drand.Participant
	11, // 7: drand.ProposalOptions.remaining:type_name -> drand.Participant
	11, // 8: drand.InitialProposal.leader:type_name -> drand.Participant
	21, // 9: drand.InitialProposal.proposal_timeout:type_name -> google.protobuf.Timestamp
	21, // 10: drand.InitialProposal.genesis_time:type_name -> google.protobuf.Timestamp
	11, // 11: drand.InitialProposal.joining:type_name -> drand.Participant
	11, // 12: drand.Proposal.leader:type_name -> drand.Participant
	21, // 13: drand.Proposal.timeout:type_name -> google.protobuf.Timestamp
	21, // 14: drand.Proposal.transition_time:type_name -> google.protobuf.Timestamp
	11, // 15: drand.Proposal.joining:type_name -> drand.Participant
	11, // 16: drand.Proposal.remaining:type_name -> drand.Participant
	11, // 17: drand.Proposal.leaving:type_name -> drand.Participant
	11, // 18: drand.ProposalTerms.leader:type_name -> drand.Participant
	21, // 19: drand.ProposalTerms.timeout:type_name -> google.protobuf.Timestamp
	21, // 20: drand.ProposalTerms.genesis_time:type_name -> google.protobuf.Timestamp
	21, // 21: drand.ProposalTerms.transition_time:type_name -> google.protobuf.Timestamp
	11, // 22: drand.ProposalTerms.joining:type_name -> drand.Participant
	11, // 23: drand.ProposalTerms.remaining:type_name -> drand.Participant
	11, // 24: drand.ProposalTerms.leaving:type_name -> drand.Participant
	11, // 25: drand.AcceptProposal.acceptor:type_name -> drand.Participant
	16, // 26: drand.AcceptProposal.metadata:type_name -> drand.DKGMetadata
	11, // 27: drand.RejectProposal.rejector:type_name -> drand.Participant
	16, // 28: drand.RejectProposal.metadata:type_name -> drand.DKGMetadata
	16, // 29: drand.AbortDKG.metadata:type_name -> drand.DKGMetadata
	16, // 30: drand.StartExecution.metadata:type_name -> drand.DKGMetadata
	19, // 31: drand.DKGStatusResponse.complete:type_name -> drand.DKGEntry
	19, // 32: drand.DKGStatusResponse.current:type_name -> drand.DKGEntry
	21, // 33: drand.DKGEntry.timeout:type_name -> google.protobuf.Timestamp
	21, // 34: drand.DKGEntry.genesis_time:type_name -> google.protobuf.Timestamp
	21, // 35: drand.DKGEntry.transition_time:type_name -> google.protobuf.Timestamp
	11, // 36: drand.DKGEntry.leader:type_name -> drand.Participant
	11, // 37: drand.DKGEntry.remaining:type_name -> drand.Participant
	11, // 38: drand.DKGEntry.joining:type_name -> drand.Participant
	11, // 39: drand.DKGEntry.leaving:type_name -> drand.Participant
	11, // 40: drand.DKGEntry.acceptors:type_name -> drand.Participant
	11, // 41: drand.DKGEntry.rejectors:type_name -> drand.Participant
	22, // 42: drand.DKGPacket.dkg:type_name -> dkg.Packet
	16, // 43: drand.DKGPacket.metadata:type_name -> drand.DKGMetadata
	0,  // 44: drand.DKGControl.StartNetwork:input_type -> drand.FirstProposalOptions
	1,  // 45: drand.DKGControl.StartProposal:input_type -> drand.ProposalOptions
	2,  // 46: drand.DKGControl.StartAbort:input_type -> drand.AbortOptions
	3,  // 47: drand.DKGControl.StartExecute:input_type -> drand.ExecutionOptions
	4,  // 48: drand.DKGControl.StartJoin:input_type -> drand.JoinOptions
	5,  // 49: drand.DKGControl.StartAccept:input_type -> drand.AcceptOptions
	6,  // 50: drand.DKGControl.StartReject:input_type -> drand.RejectOptions
	17, // 51: drand.DKGControl.DKGStatus:input_type -> drand.DKGStatusRequest
	10, // 52: drand.DKG.Propose:input_type -> drand.ProposalTerms
	14, // 53: drand.DKG.Abort:input_type -> drand.AbortDKG
	15, // 54: drand.DKG.Execute:input_type -> drand.StartExecution
	12, // 55: drand.DKG.Accept:input_type -> drand.AcceptProposal
	13, // 56: drand.DKG.Reject:input_type -> drand.RejectProposal
	20, // 57: drand.DKG.BroadcastDKG:input_type -> drand.DKGPacket
	7,  // 58: drand.DKGControl.StartNetwork:output_type -> drand.EmptyResponse
	7,  // 59: drand.DKGControl.StartProposal:output_type -> drand.EmptyResponse
	7,  // 60: drand.DKGControl.StartAbort:output_type -> drand.EmptyResponse
	7,  // 61: drand.DKGControl.StartExecute:output_type -> drand.EmptyResponse
	7,  // 62: drand.DKGControl.StartJoin:output_type -> drand.EmptyResponse
	7,  // 63: drand.DKGControl.StartAccept:output_type -> drand.EmptyResponse
	7,  // 64: drand.DKGControl.StartReject:output_type -> drand.EmptyResponse
	18, // 65: drand.DKGControl.DKGStatus:output_type -> drand.DKGStatusResponse
	7,  // 66: drand.DKG.Propose:output_type -> drand.EmptyResponse
	7,  // 67: drand.DKG.Abort:output_type -> drand.EmptyResponse
	7,  // 68: drand.DKG.Execute:output_type -> drand.EmptyResponse
	7,  // 69: drand.DKG.Accept:output_type -> drand.EmptyResponse
	7,  // 70: drand.DKG.Reject:output_type -> drand.EmptyResponse
	7,  // 71: drand.DKG.BroadcastDKG:output_type -> drand.EmptyResponse
	58, // [58:72] is the sub-list for method output_type
	44, // [44:58] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_drand_dkg_control_proto_init() }
func file_drand_dkg_control_proto_init() {
	if File_drand_dkg_control_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_drand_dkg_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstProposalOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortDKG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_dkg_control_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DKGPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drand_dkg_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_drand_dkg_control_proto_goTypes,
		DependencyIndexes: file_drand_dkg_control_proto_depIdxs,
		MessageInfos:      file_drand_dkg_control_proto_msgTypes,
	}.Build()
	File_drand_dkg_control_proto = out.File
	file_drand_dkg_control_proto_rawDesc = nil
	file_drand_dkg_control_proto_goTypes = nil
	file_drand_dkg_control_proto_depIdxs = nil
}
