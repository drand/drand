/*
 * Protobuf file containing empty message definition
 */
syntax = "proto3";

package drand;

option go_package = "github.com/drand/drand/protobuf/drand";
/*option go_package = "drand";*/

import "common/common.proto";

// TODO make doc for these
message DkgStatus{
    uint32 status = 1;
}

message ReshareStatus{
    uint32 status = 1;
}

message BeaconStatus{
    uint32 status = 1;
    bool is_running = 2;
    bool is_stopped = 3;
    bool is_started = 4;
    bool is_serving = 5;
}

message ChainStoreStatus{
    bool is_empty = 1;
    uint64 last_round = 2;
    uint64 length = 3;
}

message Address {
    string address = 1;
    bool tls = 2;
}


message StatusRequest {
    // the check_conn contains the list of addresses to check connectivity to,
    // i.e. calls Home() on it.
    // If the field is absent or empty, then there is no connectivity checks.
    repeated Address check_conn = 1;
    common.Metadata metadata = 2;
}


// StatusResponse contains different indicators of the status of the local drand
// node process and as well some view on the connectivity with other nodes if
// ask during the StatusRequest.
message StatusResponse {
    DkgStatus dkg = 1;
    ReshareStatus reshare = 2;
    BeaconStatus beacon = 3;
    ChainStoreStatus chain_store = 4;
    map<string,bool> connections = 5;
}


message Empty {
    common.Metadata metadata = 1;
}

// REMINDER: This fields should be kept in sync with IdentityResponse message
message Identity {
    string address = 1;
    bytes key = 2;
    bool tls = 3;
    // BLS signature over the identity to prove possession of the private key
    bytes signature = 4;
}

// Node holds the information related to a server in a group that forms a drand
// network
message Node {
    Identity public = 1;
    uint32 index = 2;
}

// GroupPacket represents a group that is running a drand network (or is in the
// process of creating one or performing a resharing).
message GroupPacket {
    repeated Node nodes = 1; 
    uint32 threshold = 2;
    // period in seconds
    uint32 period = 3;
    uint64 genesis_time = 4;
    uint64 transition_time = 5;
    bytes genesis_seed = 6;
    repeated bytes dist_key = 7;
    // catchup_period in seconds
    uint32 catchup_period = 8;
    string schemeID = 9;
    common.Metadata metadata = 10;
}
message GroupRequest {
    common.Metadata metadata = 1;
}

message ChainInfoRequest {
    common.Metadata metadata = 1;
}

message ChainInfoPacket {
    // marshalled public key 
    bytes public_key = 1;
    // period in seconds
    uint32 period = 2;
    // genesis time of the chain
    int64 genesis_time = 3;
    // hash is included for ease of use - not needing to have a drand client to
    // compute its hash
    bytes hash = 4;
    // hash of the genesis group
    bytes groupHash = 5;
    // indicates a set of values the process will use to act in specific ways
    string schemeID = 6;
    common.Metadata metadata = 7;
}
