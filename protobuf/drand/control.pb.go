//
// This protobuf file contains the definition of the requests and responses
// used by a drand node to locally run some commands.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: drand/control.proto

package drand

import (
	common "github.com/drand/drand/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SetupInfoPacket contains all information necessary to run an "automatic"
// setup phase where the designated leader acts as a coordinator as to what is
// the group file and when does the chain starts.
type SetupInfoPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader bool `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
	// LeaderAddress is only used by non-leader
	LeaderAddress string `protobuf:"bytes,2,opt,name=leader_address,json=leaderAddress,proto3" json:"leader_address,omitempty"`
	// LeaderTls is only used by non-leader
	LeaderTls bool `protobuf:"varint,3,opt,name=leader_tls,json=leaderTls,proto3" json:"leader_tls,omitempty"`
	// the expected number of nodes the group must have
	Nodes uint32 `protobuf:"varint,4,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// the threshold to set to the group
	Threshold uint32 `protobuf:"varint,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// timeout of the dkg - it is used for transitioning to the different phases of
	// the dkg (deal, responses and justifications if needed). Unit is in seconds.
	Timeout uint32 `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// This field is used by the coordinator to set a genesis time or transition
	// time for the beacon to start. It normally takes time.Now() +
	// beacon_offset.  This offset MUST be superior to the time it takes to
	// run the DKG, even under "malicious case" when the dkg takes longer.
	// In such cases, the dkg takes 3 * timeout time to finish because of the
	// three phases: deal, responses and justifications.
	// XXX: should find a way to designate the time *after* the DKG - beacon
	// generation and dkg should be more separated.
	BeaconOffset uint32 `protobuf:"varint,7,opt,name=beacon_offset,json=beaconOffset,proto3" json:"beacon_offset,omitempty"`
	// dkg_offset is used to set the time for which nodes should start the DKG.
	// To avoid any concurrency / networking effect where nodes start the DKG
	// while some others still haven't received the group configuration, the
	// coordinator do this in two steps: first, send the group configuration to
	// every node, and then every node start at the specified time. This offset
	// is set to be sufficiently large such that with high confidence all nodes
	// received the group file by then.
	DkgOffset uint32 `protobuf:"varint,8,opt,name=dkg_offset,json=dkgOffset,proto3" json:"dkg_offset,omitempty"`
	// the secret used to authentify group members
	Secret []byte `protobuf:"bytes,9,opt,name=secret,proto3" json:"secret,omitempty"`
	// indicating to the node that this (re)share operation should be started
	// even if there is already one in progress.
	Force    bool             `protobuf:"varint,10,opt,name=force,proto3" json:"force,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SetupInfoPacket) Reset() {
	*x = SetupInfoPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupInfoPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupInfoPacket) ProtoMessage() {}

func (x *SetupInfoPacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupInfoPacket.ProtoReflect.Descriptor instead.
func (*SetupInfoPacket) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{0}
}

func (x *SetupInfoPacket) GetLeader() bool {
	if x != nil {
		return x.Leader
	}
	return false
}

func (x *SetupInfoPacket) GetLeaderAddress() string {
	if x != nil {
		return x.LeaderAddress
	}
	return ""
}

func (x *SetupInfoPacket) GetLeaderTls() bool {
	if x != nil {
		return x.LeaderTls
	}
	return false
}

func (x *SetupInfoPacket) GetNodes() uint32 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *SetupInfoPacket) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SetupInfoPacket) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SetupInfoPacket) GetBeaconOffset() uint32 {
	if x != nil {
		return x.BeaconOffset
	}
	return 0
}

func (x *SetupInfoPacket) GetDkgOffset() uint32 {
	if x != nil {
		return x.DkgOffset
	}
	return 0
}

func (x *SetupInfoPacket) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *SetupInfoPacket) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SetupInfoPacket) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InitDKGPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *SetupInfoPacket `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Entropy *EntropyInfo     `protobuf:"bytes,2,opt,name=entropy,proto3" json:"entropy,omitempty"`
	// the period time of the beacon in seconds.
	// used only in a fresh dkg
	BeaconPeriod uint32 `protobuf:"varint,3,opt,name=beacon_period,json=beaconPeriod,proto3" json:"beacon_period,omitempty"`
	// the minimum beacon period when in catchup.
	CatchupPeriod uint32 `protobuf:"varint,4,opt,name=catchup_period,json=catchupPeriod,proto3" json:"catchup_period,omitempty"`
	// indicates a set of values the process will use to act in specific ways
	SchemeID string           `protobuf:"bytes,5,opt,name=schemeID,proto3" json:"schemeID,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InitDKGPacket) Reset() {
	*x = InitDKGPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitDKGPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitDKGPacket) ProtoMessage() {}

func (x *InitDKGPacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitDKGPacket.ProtoReflect.Descriptor instead.
func (*InitDKGPacket) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{1}
}

func (x *InitDKGPacket) GetInfo() *SetupInfoPacket {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *InitDKGPacket) GetEntropy() *EntropyInfo {
	if x != nil {
		return x.Entropy
	}
	return nil
}

func (x *InitDKGPacket) GetBeaconPeriod() uint32 {
	if x != nil {
		return x.BeaconPeriod
	}
	return 0
}

func (x *InitDKGPacket) GetCatchupPeriod() uint32 {
	if x != nil {
		return x.CatchupPeriod
	}
	return 0
}

func (x *InitDKGPacket) GetSchemeID() string {
	if x != nil {
		return x.SchemeID
	}
	return ""
}

func (x *InitDKGPacket) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InitDKGPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InitDKGPacketResponse) Reset() {
	*x = InitDKGPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitDKGPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitDKGPacketResponse) ProtoMessage() {}

func (x *InitDKGPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitDKGPacketResponse.ProtoReflect.Descriptor instead.
func (*InitDKGPacketResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{2}
}

func (x *InitDKGPacketResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// EntropyInfo contains information about external entropy sources
// can be optional
type EntropyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the path to the script to run that returns random bytes when called
	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// do we only take this entropy source or mix it with /dev/urandom
	UserOnly bool             `protobuf:"varint,10,opt,name=userOnly,proto3" json:"userOnly,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EntropyInfo) Reset() {
	*x = EntropyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntropyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntropyInfo) ProtoMessage() {}

func (x *EntropyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntropyInfo.ProtoReflect.Descriptor instead.
func (*EntropyInfo) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{3}
}

func (x *EntropyInfo) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *EntropyInfo) GetUserOnly() bool {
	if x != nil {
		return x.UserOnly
	}
	return false
}

func (x *EntropyInfo) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ReshareRequest contains references to the old and new group to perform the
// resharing protocol.
type InitResharePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Old group that needs to issue the shares for the new group
	// NOTE: It can be empty / nil. In that case, the drand node will try to
	// load the group he belongs to at the moment, if any, and use it as the old
	// group.
	Old  *GroupInfo       `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	Info *SetupInfoPacket `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// the minimum beacon period when in catchup.
	CatchupPeriodChanged bool             `protobuf:"varint,3,opt,name=catchup_period_changed,json=catchupPeriodChanged,proto3" json:"catchup_period_changed,omitempty"`
	CatchupPeriod        uint32           `protobuf:"varint,4,opt,name=catchup_period,json=catchupPeriod,proto3" json:"catchup_period,omitempty"`
	Metadata             *common.Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InitResharePacket) Reset() {
	*x = InitResharePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResharePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResharePacket) ProtoMessage() {}

func (x *InitResharePacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResharePacket.ProtoReflect.Descriptor instead.
func (*InitResharePacket) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{4}
}

func (x *InitResharePacket) GetOld() *GroupInfo {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *InitResharePacket) GetInfo() *SetupInfoPacket {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *InitResharePacket) GetCatchupPeriodChanged() bool {
	if x != nil {
		return x.CatchupPeriodChanged
	}
	return false
}

func (x *InitResharePacket) GetCatchupPeriod() uint32 {
	if x != nil {
		return x.CatchupPeriod
	}
	return 0
}

func (x *InitResharePacket) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GroupInfo holds the information to load a group information such as the nodes
// and the genesis etc. Currently only the loading of a group via filesystem is
// supported although the basis to support loading a group from a URI is setup.
// For example, for new nodes that wants to join a network, they could point to
// the URL that returns a group definition, for example at one of the currently
// running node.
type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Location:
	//	*GroupInfo_Path
	//	*GroupInfo_Url
	Location isGroupInfo_Location `protobuf_oneof:"location"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{5}
}

func (m *GroupInfo) GetLocation() isGroupInfo_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *GroupInfo) GetPath() string {
	if x, ok := x.GetLocation().(*GroupInfo_Path); ok {
		return x.Path
	}
	return ""
}

func (x *GroupInfo) GetUrl() string {
	if x, ok := x.GetLocation().(*GroupInfo_Url); ok {
		return x.Url
	}
	return ""
}

type isGroupInfo_Location interface {
	isGroupInfo_Location()
}

type GroupInfo_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"`
}

type GroupInfo_Url struct {
	// XXX not implemented
	Url string `protobuf:"bytes,2,opt,name=url,proto3,oneof"`
}

func (*GroupInfo_Path) isGroupInfo_Location() {}

func (*GroupInfo_Url) isGroupInfo_Location() {}

// ShareRequest requests the private share of a drand node
type ShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ShareRequest) Reset() {
	*x = ShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareRequest) ProtoMessage() {}

func (x *ShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareRequest.ProtoReflect.Descriptor instead.
func (*ShareRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{6}
}

func (x *ShareRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ShareResponse holds the private share of a drand node
type ShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    uint32           `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Share    []byte           `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ShareResponse) Reset() {
	*x = ShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareResponse) ProtoMessage() {}

func (x *ShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareResponse.ProtoReflect.Descriptor instead.
func (*ShareResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{7}
}

func (x *ShareResponse) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ShareResponse) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *ShareResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{8}
}

func (x *Ping) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{9}
}

func (x *Pong) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// RemoteStatusRequest contains the list of addresses that the local drand node
// process should ask the status to.
type RemoteStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Addresses []*Address       `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *RemoteStatusRequest) Reset() {
	*x = RemoteStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStatusRequest) ProtoMessage() {}

func (x *RemoteStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStatusRequest.ProtoReflect.Descriptor instead.
func (*RemoteStatusRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{10}
}

func (x *RemoteStatusRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RemoteStatusRequest) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// RemoteStatusResponse contains the statuses reponses of all nodes given in the
// requests. If a node did not reply, then the address key is absent from the
// map
type RemoteStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses map[string]*StatusResponse `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoteStatusResponse) Reset() {
	*x = RemoteStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStatusResponse) ProtoMessage() {}

func (x *RemoteStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStatusResponse.ProtoReflect.Descriptor instead.
func (*RemoteStatusResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{11}
}

func (x *RemoteStatusResponse) GetStatuses() map[string]*StatusResponse {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ListSchemesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ListSchemesRequest) Reset() {
	*x = ListSchemesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemesRequest) ProtoMessage() {}

func (x *ListSchemesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemesRequest.ProtoReflect.Descriptor instead.
func (*ListSchemesRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{12}
}

func (x *ListSchemesRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ListSchemesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []string         `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ListSchemesResponse) Reset() {
	*x = ListSchemesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemesResponse) ProtoMessage() {}

func (x *ListSchemesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemesResponse.ProtoReflect.Descriptor instead.
func (*ListSchemesResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{13}
}

func (x *ListSchemesResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListSchemesResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PublicKeyRequest requests the public key of a drand node
type PublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PublicKeyRequest) Reset() {
	*x = PublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyRequest) ProtoMessage() {}

func (x *PublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyRequest.ProtoReflect.Descriptor instead.
func (*PublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{14}
}

func (x *PublicKeyRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PublicKeyResponse holds the public key of a drand node
type PublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey   []byte           `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PublicKeyResponse) Reset() {
	*x = PublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyResponse) ProtoMessage() {}

func (x *PublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyResponse.ProtoReflect.Descriptor instead.
func (*PublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{15}
}

func (x *PublicKeyResponse) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *PublicKeyResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PrivateKeyRequest requests the private key of a drand node
type PrivateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PrivateKeyRequest) Reset() {
	*x = PrivateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyRequest) ProtoMessage() {}

func (x *PrivateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyRequest.ProtoReflect.Descriptor instead.
func (*PrivateKeyRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{16}
}

func (x *PrivateKeyRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// PrivateKeyResponse holds the private key of a drand node
type PrivateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriKey   []byte           `protobuf:"bytes,2,opt,name=priKey,proto3" json:"priKey,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PrivateKeyResponse) Reset() {
	*x = PrivateKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyResponse) ProtoMessage() {}

func (x *PrivateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyResponse.ProtoReflect.Descriptor instead.
func (*PrivateKeyResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{17}
}

func (x *PrivateKeyResponse) GetPriKey() []byte {
	if x != nil {
		return x.PriKey
	}
	return nil
}

func (x *PrivateKeyResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CokeyRequest requests the collective key of a drand node
type CokeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CokeyRequest) Reset() {
	*x = CokeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CokeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CokeyRequest) ProtoMessage() {}

func (x *CokeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CokeyRequest.ProtoReflect.Descriptor instead.
func (*CokeyRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{18}
}

func (x *CokeyRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CokeyResponse holds the collective key of a drand node
type CokeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoKey    []byte           `protobuf:"bytes,2,opt,name=coKey,proto3" json:"coKey,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CokeyResponse) Reset() {
	*x = CokeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CokeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CokeyResponse) ProtoMessage() {}

func (x *CokeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CokeyResponse.ProtoReflect.Descriptor instead.
func (*CokeyResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{19}
}

func (x *CokeyResponse) GetCoKey() []byte {
	if x != nil {
		return x.CoKey
	}
	return nil
}

func (x *CokeyResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GroupTOMLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TOML-encoded group file
	GroupToml string           `protobuf:"bytes,1,opt,name=group_toml,json=groupToml,proto3" json:"group_toml,omitempty"`
	Metadata  *common.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GroupTOMLResponse) Reset() {
	*x = GroupTOMLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTOMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTOMLResponse) ProtoMessage() {}

func (x *GroupTOMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTOMLResponse.ProtoReflect.Descriptor instead.
func (*GroupTOMLResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{20}
}

func (x *GroupTOMLResponse) GetGroupToml() string {
	if x != nil {
		return x.GroupToml
	}
	return ""
}

func (x *GroupTOMLResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{21}
}

func (x *ShutdownRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{22}
}

func (x *ShutdownResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StartFollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hex format
	InfoHash string `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
	// nodes to contact to
	Nodes []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// is TLS enabled on these nodes or not
	// NOTE currently drand either supports following from all TLS or all
	// non-tls nodes
	IsTls bool `protobuf:"varint,3,opt,name=is_tls,json=isTls,proto3" json:"is_tls,omitempty"`
	// up_to tells the drand daemon to not follow up after the given round.
	// if up_to is 0, the follow operation continues until it is cancelled.
	UpTo     uint64           `protobuf:"varint,4,opt,name=up_to,json=upTo,proto3" json:"up_to,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StartFollowRequest) Reset() {
	*x = StartFollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFollowRequest) ProtoMessage() {}

func (x *StartFollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFollowRequest.ProtoReflect.Descriptor instead.
func (*StartFollowRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{23}
}

func (x *StartFollowRequest) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *StartFollowRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *StartFollowRequest) GetIsTls() bool {
	if x != nil {
		return x.IsTls
	}
	return false
}

func (x *StartFollowRequest) GetUpTo() uint64 {
	if x != nil {
		return x.UpTo
	}
	return 0
}

func (x *StartFollowRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FollowProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current  uint64           `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Target   uint64           `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	Metadata *common.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FollowProgress) Reset() {
	*x = FollowProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowProgress) ProtoMessage() {}

func (x *FollowProgress) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowProgress.ProtoReflect.Descriptor instead.
func (*FollowProgress) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{24}
}

func (x *FollowProgress) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FollowProgress) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *FollowProgress) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BackupDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputFile string           `protobuf:"bytes,1,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	Metadata   *common.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BackupDBRequest) Reset() {
	*x = BackupDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDBRequest) ProtoMessage() {}

func (x *BackupDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDBRequest.ProtoReflect.Descriptor instead.
func (*BackupDBRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{25}
}

func (x *BackupDBRequest) GetOutputFile() string {
	if x != nil {
		return x.OutputFile
	}
	return ""
}

func (x *BackupDBRequest) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BackupDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *common.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BackupDBResponse) Reset() {
	*x = BackupDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDBResponse) ProtoMessage() {}

func (x *BackupDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDBResponse.ProtoReflect.Descriptor instead.
func (*BackupDBResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{26}
}

func (x *BackupDBResponse) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_drand_control_proto protoreflect.FileDescriptor

var file_drand_control_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6b,
	0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x6b, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x4b,
	0x47, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x44,
	0x4b, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f,
	0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xee, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x41, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x69, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x34, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x42, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x11,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x12, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x0c, 0x43, 0x6f, 0x6b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x6f, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x4f, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x6d, 0x6c, 0x12, 0x2c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x0f, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x10,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1,
	0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6c, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x75, 0x70, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x70, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x42,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0xf6, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67,
	0x12, 0x0b, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x0b, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x07, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x4b, 0x47, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x4b, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x12,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x12, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x43, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_drand_control_proto_rawDescOnce sync.Once
	file_drand_control_proto_rawDescData = file_drand_control_proto_rawDesc
)

func file_drand_control_proto_rawDescGZIP() []byte {
	file_drand_control_proto_rawDescOnce.Do(func() {
		file_drand_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_drand_control_proto_rawDescData)
	})
	return file_drand_control_proto_rawDescData
}

var file_drand_control_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_drand_control_proto_goTypes = []interface{}{
	(*SetupInfoPacket)(nil),       // 0: drand.SetupInfoPacket
	(*InitDKGPacket)(nil),         // 1: drand.InitDKGPacket
	(*InitDKGPacketResponse)(nil), // 2: drand.InitDKGPacketResponse
	(*EntropyInfo)(nil),           // 3: drand.EntropyInfo
	(*InitResharePacket)(nil),     // 4: drand.InitResharePacket
	(*GroupInfo)(nil),             // 5: drand.GroupInfo
	(*ShareRequest)(nil),          // 6: drand.ShareRequest
	(*ShareResponse)(nil),         // 7: drand.ShareResponse
	(*Ping)(nil),                  // 8: drand.Ping
	(*Pong)(nil),                  // 9: drand.Pong
	(*RemoteStatusRequest)(nil),   // 10: drand.RemoteStatusRequest
	(*RemoteStatusResponse)(nil),  // 11: drand.RemoteStatusResponse
	(*ListSchemesRequest)(nil),    // 12: drand.ListSchemesRequest
	(*ListSchemesResponse)(nil),   // 13: drand.ListSchemesResponse
	(*PublicKeyRequest)(nil),      // 14: drand.PublicKeyRequest
	(*PublicKeyResponse)(nil),     // 15: drand.PublicKeyResponse
	(*PrivateKeyRequest)(nil),     // 16: drand.PrivateKeyRequest
	(*PrivateKeyResponse)(nil),    // 17: drand.PrivateKeyResponse
	(*CokeyRequest)(nil),          // 18: drand.CokeyRequest
	(*CokeyResponse)(nil),         // 19: drand.CokeyResponse
	(*GroupTOMLResponse)(nil),     // 20: drand.GroupTOMLResponse
	(*ShutdownRequest)(nil),       // 21: drand.ShutdownRequest
	(*ShutdownResponse)(nil),      // 22: drand.ShutdownResponse
	(*StartFollowRequest)(nil),    // 23: drand.StartFollowRequest
	(*FollowProgress)(nil),        // 24: drand.FollowProgress
	(*BackupDBRequest)(nil),       // 25: drand.BackupDBRequest
	(*BackupDBResponse)(nil),      // 26: drand.BackupDBResponse
	nil,                           // 27: drand.RemoteStatusResponse.StatusesEntry
	(*common.Metadata)(nil),       // 28: common.Metadata
	(*Address)(nil),               // 29: drand.Address
	(*StatusResponse)(nil),        // 30: drand.StatusResponse
	(*StatusRequest)(nil),         // 31: drand.StatusRequest
	(*ChainInfoRequest)(nil),      // 32: drand.ChainInfoRequest
	(*GroupRequest)(nil),          // 33: drand.GroupRequest
	(*GroupPacket)(nil),           // 34: drand.GroupPacket
	(*ChainInfoPacket)(nil),       // 35: drand.ChainInfoPacket
}
var file_drand_control_proto_depIdxs = []int32{
	28, // 0: drand.SetupInfoPacket.metadata:type_name -> common.Metadata
	0,  // 1: drand.InitDKGPacket.info:type_name -> drand.SetupInfoPacket
	3,  // 2: drand.InitDKGPacket.entropy:type_name -> drand.EntropyInfo
	28, // 3: drand.InitDKGPacket.metadata:type_name -> common.Metadata
	28, // 4: drand.InitDKGPacketResponse.metadata:type_name -> common.Metadata
	28, // 5: drand.EntropyInfo.metadata:type_name -> common.Metadata
	5,  // 6: drand.InitResharePacket.old:type_name -> drand.GroupInfo
	0,  // 7: drand.InitResharePacket.info:type_name -> drand.SetupInfoPacket
	28, // 8: drand.InitResharePacket.metadata:type_name -> common.Metadata
	28, // 9: drand.ShareRequest.metadata:type_name -> common.Metadata
	28, // 10: drand.ShareResponse.metadata:type_name -> common.Metadata
	28, // 11: drand.Ping.metadata:type_name -> common.Metadata
	28, // 12: drand.Pong.metadata:type_name -> common.Metadata
	28, // 13: drand.RemoteStatusRequest.metadata:type_name -> common.Metadata
	29, // 14: drand.RemoteStatusRequest.addresses:type_name -> drand.Address
	27, // 15: drand.RemoteStatusResponse.statuses:type_name -> drand.RemoteStatusResponse.StatusesEntry
	28, // 16: drand.ListSchemesRequest.metadata:type_name -> common.Metadata
	28, // 17: drand.ListSchemesResponse.metadata:type_name -> common.Metadata
	28, // 18: drand.PublicKeyRequest.metadata:type_name -> common.Metadata
	28, // 19: drand.PublicKeyResponse.metadata:type_name -> common.Metadata
	28, // 20: drand.PrivateKeyRequest.metadata:type_name -> common.Metadata
	28, // 21: drand.PrivateKeyResponse.metadata:type_name -> common.Metadata
	28, // 22: drand.CokeyRequest.metadata:type_name -> common.Metadata
	28, // 23: drand.CokeyResponse.metadata:type_name -> common.Metadata
	28, // 24: drand.GroupTOMLResponse.metadata:type_name -> common.Metadata
	28, // 25: drand.ShutdownRequest.metadata:type_name -> common.Metadata
	28, // 26: drand.ShutdownResponse.metadata:type_name -> common.Metadata
	28, // 27: drand.StartFollowRequest.metadata:type_name -> common.Metadata
	28, // 28: drand.FollowProgress.metadata:type_name -> common.Metadata
	28, // 29: drand.BackupDBRequest.metadata:type_name -> common.Metadata
	28, // 30: drand.BackupDBResponse.metadata:type_name -> common.Metadata
	30, // 31: drand.RemoteStatusResponse.StatusesEntry.value:type_name -> drand.StatusResponse
	8,  // 32: drand.Control.PingPong:input_type -> drand.Ping
	31, // 33: drand.Control.Status:input_type -> drand.StatusRequest
	12, // 34: drand.Control.ListSchemes:input_type -> drand.ListSchemesRequest
	1,  // 35: drand.Control.InitDKG:input_type -> drand.InitDKGPacket
	4,  // 36: drand.Control.InitReshare:input_type -> drand.InitResharePacket
	6,  // 37: drand.Control.Share:input_type -> drand.ShareRequest
	14, // 38: drand.Control.PublicKey:input_type -> drand.PublicKeyRequest
	16, // 39: drand.Control.PrivateKey:input_type -> drand.PrivateKeyRequest
	32, // 40: drand.Control.ChainInfo:input_type -> drand.ChainInfoRequest
	33, // 41: drand.Control.GroupFile:input_type -> drand.GroupRequest
	21, // 42: drand.Control.Shutdown:input_type -> drand.ShutdownRequest
	23, // 43: drand.Control.StartFollowChain:input_type -> drand.StartFollowRequest
	25, // 44: drand.Control.BackupDatabase:input_type -> drand.BackupDBRequest
	10, // 45: drand.Control.RemoteStatus:input_type -> drand.RemoteStatusRequest
	9,  // 46: drand.Control.PingPong:output_type -> drand.Pong
	30, // 47: drand.Control.Status:output_type -> drand.StatusResponse
	13, // 48: drand.Control.ListSchemes:output_type -> drand.ListSchemesResponse
	34, // 49: drand.Control.InitDKG:output_type -> drand.GroupPacket
	34, // 50: drand.Control.InitReshare:output_type -> drand.GroupPacket
	7,  // 51: drand.Control.Share:output_type -> drand.ShareResponse
	15, // 52: drand.Control.PublicKey:output_type -> drand.PublicKeyResponse
	17, // 53: drand.Control.PrivateKey:output_type -> drand.PrivateKeyResponse
	35, // 54: drand.Control.ChainInfo:output_type -> drand.ChainInfoPacket
	34, // 55: drand.Control.GroupFile:output_type -> drand.GroupPacket
	22, // 56: drand.Control.Shutdown:output_type -> drand.ShutdownResponse
	24, // 57: drand.Control.StartFollowChain:output_type -> drand.FollowProgress
	26, // 58: drand.Control.BackupDatabase:output_type -> drand.BackupDBResponse
	11, // 59: drand.Control.RemoteStatus:output_type -> drand.RemoteStatusResponse
	46, // [46:60] is the sub-list for method output_type
	32, // [32:46] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_drand_control_proto_init() }
func file_drand_control_proto_init() {
	if File_drand_control_proto != nil {
		return
	}
	file_drand_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_drand_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupInfoPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitDKGPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitDKGPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntropyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResharePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchemesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchemesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CokeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CokeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTOMLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_drand_control_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GroupInfo_Path)(nil),
		(*GroupInfo_Url)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drand_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drand_control_proto_goTypes,
		DependencyIndexes: file_drand_control_proto_depIdxs,
		MessageInfos:      file_drand_control_proto_msgTypes,
	}.Build()
	File_drand_control_proto = out.File
	file_drand_control_proto_rawDesc = nil
	file_drand_control_proto_goTypes = nil
	file_drand_control_proto_depIdxs = nil
}
