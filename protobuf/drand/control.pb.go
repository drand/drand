//
// This protobuf file contains the definition of the requests and responses
// used by a drand node to locally run some commands.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: drand/control.proto

package drand

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SetupInfoPacket contains all information necessary to run an "automatic"
// setup phase where the designated leader acts as a coordinator as to what is
// the group file and when does the chain starts.
type SetupInfoPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader bool `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
	// LeaderAddress is only used by non-leader
	LeaderAddress string `protobuf:"bytes,2,opt,name=leader_address,json=leaderAddress,proto3" json:"leader_address,omitempty"`
	// LeaderTls is only used by non-leader
	LeaderTls bool `protobuf:"varint,3,opt,name=leader_tls,json=leaderTls,proto3" json:"leader_tls,omitempty"`
	// the expected number of nodes the group must have
	Nodes uint32 `protobuf:"varint,4,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// the threshold to set to the group
	Threshold uint32 `protobuf:"varint,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// timeout of the dkg - it is used for transitioning to the different phases of
	// the dkg (deal, responses and justifications if needed). Unit is in seconds.
	Timeout uint32 `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// This field is used by the coordinator to set a genesis time or transition
	// time for the beacon to start. It normally takes time.Now() +
	// beacon_offset.  This offset MUST be superior to the time it takes to
	// run the DKG, even under "malicious case" when the dkg takes longer.
	// In such cases, the dkg takes 3 * timeout time to finish because of the
	// three phases: deal, responses and justifications.
	// XXX: should find a way to designate the time *after* the DKG - beacon
	// generation and dkg should be more separated.
	BeaconOffset uint32 `protobuf:"varint,7,opt,name=beacon_offset,json=beaconOffset,proto3" json:"beacon_offset,omitempty"`
	// dkg_offset is used to set the time for which nodes should start the DKG.
	// To avoid any concurrency / networking effect where nodes start the DKG
	// while some others still haven't received the group configuration, the
	// coordinator do this in two steps: first, send the group configuration to
	// every node, and then every node start at the specified time. This offset
	// is set to be sufficiently large such that with high confidence all nodes
	// received the group file by then.
	DkgOffset uint32 `protobuf:"varint,8,opt,name=dkg_offset,json=dkgOffset,proto3" json:"dkg_offset,omitempty"`
	// the secret used to authentify group members
	Secret []byte `protobuf:"bytes,9,opt,name=secret,proto3" json:"secret,omitempty"`
	// indicating to the node that this (re)share operation should be started
	// even if there is already one in progress.
	Force bool `protobuf:"varint,10,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *SetupInfoPacket) Reset() {
	*x = SetupInfoPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupInfoPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupInfoPacket) ProtoMessage() {}

func (x *SetupInfoPacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupInfoPacket.ProtoReflect.Descriptor instead.
func (*SetupInfoPacket) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{0}
}

func (x *SetupInfoPacket) GetLeader() bool {
	if x != nil {
		return x.Leader
	}
	return false
}

func (x *SetupInfoPacket) GetLeaderAddress() string {
	if x != nil {
		return x.LeaderAddress
	}
	return ""
}

func (x *SetupInfoPacket) GetLeaderTls() bool {
	if x != nil {
		return x.LeaderTls
	}
	return false
}

func (x *SetupInfoPacket) GetNodes() uint32 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *SetupInfoPacket) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SetupInfoPacket) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SetupInfoPacket) GetBeaconOffset() uint32 {
	if x != nil {
		return x.BeaconOffset
	}
	return 0
}

func (x *SetupInfoPacket) GetDkgOffset() uint32 {
	if x != nil {
		return x.DkgOffset
	}
	return 0
}

func (x *SetupInfoPacket) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *SetupInfoPacket) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type InitDKGPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *SetupInfoPacket `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Entropy *EntropyInfo     `protobuf:"bytes,2,opt,name=entropy,proto3" json:"entropy,omitempty"`
	// the period time of the beacon in seconds.
	// used only in a fresh dkg
	BeaconPeriod uint32 `protobuf:"varint,3,opt,name=beacon_period,json=beaconPeriod,proto3" json:"beacon_period,omitempty"`
	// the minimum beacon period when in catchup.
	CatchupPeriod uint32 `protobuf:"varint,4,opt,name=catchup_period,json=catchupPeriod,proto3" json:"catchup_period,omitempty"`
}

func (x *InitDKGPacket) Reset() {
	*x = InitDKGPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitDKGPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitDKGPacket) ProtoMessage() {}

func (x *InitDKGPacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitDKGPacket.ProtoReflect.Descriptor instead.
func (*InitDKGPacket) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{1}
}

func (x *InitDKGPacket) GetInfo() *SetupInfoPacket {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *InitDKGPacket) GetEntropy() *EntropyInfo {
	if x != nil {
		return x.Entropy
	}
	return nil
}

func (x *InitDKGPacket) GetBeaconPeriod() uint32 {
	if x != nil {
		return x.BeaconPeriod
	}
	return 0
}

func (x *InitDKGPacket) GetCatchupPeriod() uint32 {
	if x != nil {
		return x.CatchupPeriod
	}
	return 0
}

// EntropyInfo contains information about external entropy sources
// can be optional
type EntropyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the path to the script to run that returns random bytes when called
	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// do we only take this entropy source or mix it with /dev/urandom
	UserOnly bool `protobuf:"varint,10,opt,name=userOnly,proto3" json:"userOnly,omitempty"`
}

func (x *EntropyInfo) Reset() {
	*x = EntropyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntropyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntropyInfo) ProtoMessage() {}

func (x *EntropyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntropyInfo.ProtoReflect.Descriptor instead.
func (*EntropyInfo) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{2}
}

func (x *EntropyInfo) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *EntropyInfo) GetUserOnly() bool {
	if x != nil {
		return x.UserOnly
	}
	return false
}

// ReshareRequest contains references to the old and new group to perform the
// resharing protocol.
type InitResharePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Old group that needs to issue the shares for the new group
	// NOTE: It can be empty / nil. In that case, the drand node will try to
	// load the group he belongs to at the moment, if any, and use it as the old
	// group.
	Old  *GroupInfo       `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	Info *SetupInfoPacket `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// the minimum beacon period when in catchup.
	CatchupPeriodChanged bool   `protobuf:"varint,3,opt,name=catchup_period_changed,json=catchupPeriodChanged,proto3" json:"catchup_period_changed,omitempty"`
	CatchupPeriod        uint32 `protobuf:"varint,4,opt,name=catchup_period,json=catchupPeriod,proto3" json:"catchup_period,omitempty"`
}

func (x *InitResharePacket) Reset() {
	*x = InitResharePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResharePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResharePacket) ProtoMessage() {}

func (x *InitResharePacket) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResharePacket.ProtoReflect.Descriptor instead.
func (*InitResharePacket) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{3}
}

func (x *InitResharePacket) GetOld() *GroupInfo {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *InitResharePacket) GetInfo() *SetupInfoPacket {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *InitResharePacket) GetCatchupPeriodChanged() bool {
	if x != nil {
		return x.CatchupPeriodChanged
	}
	return false
}

func (x *InitResharePacket) GetCatchupPeriod() uint32 {
	if x != nil {
		return x.CatchupPeriod
	}
	return 0
}

// GroupInfo holds the information to load a group information such as the nodes
// and the genesis etc. Currently only the loading of a group via filesystem is
// supported although the basis to support loading a group from a URI is setup.
// For example, for new nodes that wants to join a network, they could point to
// the URL that returns a group definition, for example at one of the currently
// running node.
type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Location:
	//	*GroupInfo_Path
	//	*GroupInfo_Url
	Location isGroupInfo_Location `protobuf_oneof:"location"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{4}
}

func (m *GroupInfo) GetLocation() isGroupInfo_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *GroupInfo) GetPath() string {
	if x, ok := x.GetLocation().(*GroupInfo_Path); ok {
		return x.Path
	}
	return ""
}

func (x *GroupInfo) GetUrl() string {
	if x, ok := x.GetLocation().(*GroupInfo_Url); ok {
		return x.Url
	}
	return ""
}

type isGroupInfo_Location interface {
	isGroupInfo_Location()
}

type GroupInfo_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"`
}

type GroupInfo_Url struct {
	// XXX not implemented
	Url string `protobuf:"bytes,2,opt,name=url,proto3,oneof"`
}

func (*GroupInfo_Path) isGroupInfo_Location() {}

func (*GroupInfo_Url) isGroupInfo_Location() {}

// ShareRequest requests the private share of a drand node
type ShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShareRequest) Reset() {
	*x = ShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareRequest) ProtoMessage() {}

func (x *ShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareRequest.ProtoReflect.Descriptor instead.
func (*ShareRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{5}
}

// ShareResponse holds the private share of a drand node
type ShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Share []byte `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *ShareResponse) Reset() {
	*x = ShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareResponse) ProtoMessage() {}

func (x *ShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareResponse.ProtoReflect.Descriptor instead.
func (*ShareResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{6}
}

func (x *ShareResponse) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ShareResponse) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{7}
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{8}
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{9}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dkg        *DkgStatus        `protobuf:"bytes,1,opt,name=dkg,proto3" json:"dkg,omitempty"`
	Reshare    *ReshareStatus    `protobuf:"bytes,2,opt,name=reshare,proto3" json:"reshare,omitempty"`
	Beacon     *BeaconStatus     `protobuf:"bytes,3,opt,name=beacon,proto3" json:"beacon,omitempty"`
	ChainStore *ChainStoreStatus `protobuf:"bytes,4,opt,name=chain_store,json=chainStore,proto3" json:"chain_store,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{10}
}

func (x *StatusResponse) GetDkg() *DkgStatus {
	if x != nil {
		return x.Dkg
	}
	return nil
}

func (x *StatusResponse) GetReshare() *ReshareStatus {
	if x != nil {
		return x.Reshare
	}
	return nil
}

func (x *StatusResponse) GetBeacon() *BeaconStatus {
	if x != nil {
		return x.Beacon
	}
	return nil
}

func (x *StatusResponse) GetChainStore() *ChainStoreStatus {
	if x != nil {
		return x.ChainStore
	}
	return nil
}

type DkgStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DkgStatus) Reset() {
	*x = DkgStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgStatus) ProtoMessage() {}

func (x *DkgStatus) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgStatus.ProtoReflect.Descriptor instead.
func (*DkgStatus) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{11}
}

func (x *DkgStatus) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ReshareStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReshareStatus) Reset() {
	*x = ReshareStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReshareStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReshareStatus) ProtoMessage() {}

func (x *ReshareStatus) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReshareStatus.ProtoReflect.Descriptor instead.
func (*ReshareStatus) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{12}
}

func (x *ReshareStatus) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type BeaconStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	IsRunning bool   `protobuf:"varint,2,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	IsStopped bool   `protobuf:"varint,3,opt,name=is_stopped,json=isStopped,proto3" json:"is_stopped,omitempty"`
	IsStarted bool   `protobuf:"varint,4,opt,name=is_started,json=isStarted,proto3" json:"is_started,omitempty"`
	IsServing bool   `protobuf:"varint,5,opt,name=is_serving,json=isServing,proto3" json:"is_serving,omitempty"`
}

func (x *BeaconStatus) Reset() {
	*x = BeaconStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconStatus) ProtoMessage() {}

func (x *BeaconStatus) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconStatus.ProtoReflect.Descriptor instead.
func (*BeaconStatus) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{13}
}

func (x *BeaconStatus) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BeaconStatus) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *BeaconStatus) GetIsStopped() bool {
	if x != nil {
		return x.IsStopped
	}
	return false
}

func (x *BeaconStatus) GetIsStarted() bool {
	if x != nil {
		return x.IsStarted
	}
	return false
}

func (x *BeaconStatus) GetIsServing() bool {
	if x != nil {
		return x.IsServing
	}
	return false
}

type ChainStoreStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAnyRound bool   `protobuf:"varint,1,opt,name=is_any_round,json=isAnyRound,proto3" json:"is_any_round,omitempty"`
	LastRound  uint64 `protobuf:"varint,2,opt,name=last_round,json=lastRound,proto3" json:"last_round,omitempty"`
	Length     uint64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ChainStoreStatus) Reset() {
	*x = ChainStoreStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStoreStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStoreStatus) ProtoMessage() {}

func (x *ChainStoreStatus) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStoreStatus.ProtoReflect.Descriptor instead.
func (*ChainStoreStatus) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{14}
}

func (x *ChainStoreStatus) GetIsAnyRound() bool {
	if x != nil {
		return x.IsAnyRound
	}
	return false
}

func (x *ChainStoreStatus) GetLastRound() uint64 {
	if x != nil {
		return x.LastRound
	}
	return 0
}

func (x *ChainStoreStatus) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// PublicKeyRequest requests the public key of a drand node
type PublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicKeyRequest) Reset() {
	*x = PublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyRequest) ProtoMessage() {}

func (x *PublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyRequest.ProtoReflect.Descriptor instead.
func (*PublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{15}
}

// PublicKeyResponse holds the public key of a drand node
type PublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (x *PublicKeyResponse) Reset() {
	*x = PublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyResponse) ProtoMessage() {}

func (x *PublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyResponse.ProtoReflect.Descriptor instead.
func (*PublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{16}
}

func (x *PublicKeyResponse) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

// PrivateKeyRequest requests the private key of a drand node
type PrivateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrivateKeyRequest) Reset() {
	*x = PrivateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyRequest) ProtoMessage() {}

func (x *PrivateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyRequest.ProtoReflect.Descriptor instead.
func (*PrivateKeyRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{17}
}

// PrivateKeyResponse holds the private key of a drand node
type PrivateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriKey []byte `protobuf:"bytes,2,opt,name=priKey,proto3" json:"priKey,omitempty"`
}

func (x *PrivateKeyResponse) Reset() {
	*x = PrivateKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyResponse) ProtoMessage() {}

func (x *PrivateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyResponse.ProtoReflect.Descriptor instead.
func (*PrivateKeyResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{18}
}

func (x *PrivateKeyResponse) GetPriKey() []byte {
	if x != nil {
		return x.PriKey
	}
	return nil
}

// CokeyRequest requests the collective key of a drand node
type CokeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CokeyRequest) Reset() {
	*x = CokeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CokeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CokeyRequest) ProtoMessage() {}

func (x *CokeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CokeyRequest.ProtoReflect.Descriptor instead.
func (*CokeyRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{19}
}

// CokeyResponse holds the collective key of a drand node
type CokeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoKey []byte `protobuf:"bytes,2,opt,name=coKey,proto3" json:"coKey,omitempty"`
}

func (x *CokeyResponse) Reset() {
	*x = CokeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CokeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CokeyResponse) ProtoMessage() {}

func (x *CokeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CokeyResponse.ProtoReflect.Descriptor instead.
func (*CokeyResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{20}
}

func (x *CokeyResponse) GetCoKey() []byte {
	if x != nil {
		return x.CoKey
	}
	return nil
}

type GroupTOMLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TOML-encoded group file
	GroupToml string `protobuf:"bytes,1,opt,name=group_toml,json=groupToml,proto3" json:"group_toml,omitempty"`
}

func (x *GroupTOMLResponse) Reset() {
	*x = GroupTOMLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTOMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTOMLResponse) ProtoMessage() {}

func (x *GroupTOMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTOMLResponse.ProtoReflect.Descriptor instead.
func (*GroupTOMLResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{21}
}

func (x *GroupTOMLResponse) GetGroupToml() string {
	if x != nil {
		return x.GroupToml
	}
	return ""
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{22}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{23}
}

type StartFollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hex format
	InfoHash string `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
	// nodes to contact to
	Nodes []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// is TLS enabled on these nodes or not
	// NOTE currently drand either supports following from all TLS or all
	// non-tls nodes
	IsTls bool `protobuf:"varint,3,opt,name=is_tls,json=isTls,proto3" json:"is_tls,omitempty"`
	// up_to tells the drand daemon to not follow up after the given round.
	// if up_to is 0, the follow operation continues until it is cancelled.
	UpTo uint64 `protobuf:"varint,4,opt,name=up_to,json=upTo,proto3" json:"up_to,omitempty"`
}

func (x *StartFollowRequest) Reset() {
	*x = StartFollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartFollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartFollowRequest) ProtoMessage() {}

func (x *StartFollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartFollowRequest.ProtoReflect.Descriptor instead.
func (*StartFollowRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{24}
}

func (x *StartFollowRequest) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *StartFollowRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *StartFollowRequest) GetIsTls() bool {
	if x != nil {
		return x.IsTls
	}
	return false
}

func (x *StartFollowRequest) GetUpTo() uint64 {
	if x != nil {
		return x.UpTo
	}
	return 0
}

type FollowProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current uint64 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Target  uint64 `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *FollowProgress) Reset() {
	*x = FollowProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowProgress) ProtoMessage() {}

func (x *FollowProgress) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowProgress.ProtoReflect.Descriptor instead.
func (*FollowProgress) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{25}
}

func (x *FollowProgress) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FollowProgress) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

type BackupDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputFile string `protobuf:"bytes,1,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
}

func (x *BackupDBRequest) Reset() {
	*x = BackupDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDBRequest) ProtoMessage() {}

func (x *BackupDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDBRequest.ProtoReflect.Descriptor instead.
func (*BackupDBRequest) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{26}
}

func (x *BackupDBRequest) GetOutputFile() string {
	if x != nil {
		return x.OutputFile
	}
	return ""
}

type BackupDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackupDBResponse) Reset() {
	*x = BackupDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drand_control_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDBResponse) ProtoMessage() {}

func (x *BackupDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drand_control_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDBResponse.ProtoReflect.Descriptor instead.
func (*BackupDBResponse) Descriptor() ([]byte, []int) {
	return file_drand_control_proto_rawDescGZIP(), []int{27}
}

var File_drand_control_proto protoreflect.FileDescriptor

var file_drand_control_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x1a, 0x12, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xaf, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6b, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6b, 0x67, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x4b, 0x47, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x41, 0x0a, 0x0b, 0x45, 0x6e,
	0x74, 0x72, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xc0, 0x01,
	0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0x41, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x22, 0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67,
	0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xcb, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x64, 0x6b, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x6b, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x03, 0x64, 0x6b, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0x23, 0x0a, 0x09, 0x44, 0x6b, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x27, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x0c, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x22, 0x6b, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x79,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x6e, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0x12, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x22, 0x13, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x6f, 0x4b, 0x65, 0x79, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x4f, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x6d, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x6d, 0x6c, 0x22, 0x11,
	0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x54, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x70, 0x54, 0x6f, 0x22, 0x42, 0x0a, 0x0e, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x32,
	0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x42, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe3, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x0b,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x0b, 0x2e, 0x64, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x64, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x07, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x4b, 0x47, 0x12, 0x14,
	0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x4b, 0x47, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x64,
	0x72, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x72, 0x61, 0x6e,
	0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72, 0x61, 0x6e, 0x64,
	0x2f, 0x64, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x72, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drand_control_proto_rawDescOnce sync.Once
	file_drand_control_proto_rawDescData = file_drand_control_proto_rawDesc
)

func file_drand_control_proto_rawDescGZIP() []byte {
	file_drand_control_proto_rawDescOnce.Do(func() {
		file_drand_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_drand_control_proto_rawDescData)
	})
	return file_drand_control_proto_rawDescData
}

var file_drand_control_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_drand_control_proto_goTypes = []interface{}{
	(*SetupInfoPacket)(nil),    // 0: drand.SetupInfoPacket
	(*InitDKGPacket)(nil),      // 1: drand.InitDKGPacket
	(*EntropyInfo)(nil),        // 2: drand.EntropyInfo
	(*InitResharePacket)(nil),  // 3: drand.InitResharePacket
	(*GroupInfo)(nil),          // 4: drand.GroupInfo
	(*ShareRequest)(nil),       // 5: drand.ShareRequest
	(*ShareResponse)(nil),      // 6: drand.ShareResponse
	(*Ping)(nil),               // 7: drand.Ping
	(*Pong)(nil),               // 8: drand.Pong
	(*StatusRequest)(nil),      // 9: drand.StatusRequest
	(*StatusResponse)(nil),     // 10: drand.StatusResponse
	(*DkgStatus)(nil),          // 11: drand.DkgStatus
	(*ReshareStatus)(nil),      // 12: drand.ReshareStatus
	(*BeaconStatus)(nil),       // 13: drand.BeaconStatus
	(*ChainStoreStatus)(nil),   // 14: drand.ChainStoreStatus
	(*PublicKeyRequest)(nil),   // 15: drand.PublicKeyRequest
	(*PublicKeyResponse)(nil),  // 16: drand.PublicKeyResponse
	(*PrivateKeyRequest)(nil),  // 17: drand.PrivateKeyRequest
	(*PrivateKeyResponse)(nil), // 18: drand.PrivateKeyResponse
	(*CokeyRequest)(nil),       // 19: drand.CokeyRequest
	(*CokeyResponse)(nil),      // 20: drand.CokeyResponse
	(*GroupTOMLResponse)(nil),  // 21: drand.GroupTOMLResponse
	(*ShutdownRequest)(nil),    // 22: drand.ShutdownRequest
	(*ShutdownResponse)(nil),   // 23: drand.ShutdownResponse
	(*StartFollowRequest)(nil), // 24: drand.StartFollowRequest
	(*FollowProgress)(nil),     // 25: drand.FollowProgress
	(*BackupDBRequest)(nil),    // 26: drand.BackupDBRequest
	(*BackupDBResponse)(nil),   // 27: drand.BackupDBResponse
	(*ChainInfoRequest)(nil),   // 28: drand.ChainInfoRequest
	(*GroupRequest)(nil),       // 29: drand.GroupRequest
	(*GroupPacket)(nil),        // 30: drand.GroupPacket
	(*ChainInfoPacket)(nil),    // 31: drand.ChainInfoPacket
}
var file_drand_control_proto_depIdxs = []int32{
	0,  // 0: drand.InitDKGPacket.info:type_name -> drand.SetupInfoPacket
	2,  // 1: drand.InitDKGPacket.entropy:type_name -> drand.EntropyInfo
	4,  // 2: drand.InitResharePacket.old:type_name -> drand.GroupInfo
	0,  // 3: drand.InitResharePacket.info:type_name -> drand.SetupInfoPacket
	11, // 4: drand.StatusResponse.dkg:type_name -> drand.DkgStatus
	12, // 5: drand.StatusResponse.reshare:type_name -> drand.ReshareStatus
	13, // 6: drand.StatusResponse.beacon:type_name -> drand.BeaconStatus
	14, // 7: drand.StatusResponse.chain_store:type_name -> drand.ChainStoreStatus
	7,  // 8: drand.Control.PingPong:input_type -> drand.Ping
	9,  // 9: drand.Control.Status:input_type -> drand.StatusRequest
	1,  // 10: drand.Control.InitDKG:input_type -> drand.InitDKGPacket
	3,  // 11: drand.Control.InitReshare:input_type -> drand.InitResharePacket
	5,  // 12: drand.Control.Share:input_type -> drand.ShareRequest
	15, // 13: drand.Control.PublicKey:input_type -> drand.PublicKeyRequest
	17, // 14: drand.Control.PrivateKey:input_type -> drand.PrivateKeyRequest
	28, // 15: drand.Control.ChainInfo:input_type -> drand.ChainInfoRequest
	29, // 16: drand.Control.GroupFile:input_type -> drand.GroupRequest
	22, // 17: drand.Control.Shutdown:input_type -> drand.ShutdownRequest
	24, // 18: drand.Control.StartFollowChain:input_type -> drand.StartFollowRequest
	26, // 19: drand.Control.BackupDatabase:input_type -> drand.BackupDBRequest
	8,  // 20: drand.Control.PingPong:output_type -> drand.Pong
	10, // 21: drand.Control.Status:output_type -> drand.StatusResponse
	30, // 22: drand.Control.InitDKG:output_type -> drand.GroupPacket
	30, // 23: drand.Control.InitReshare:output_type -> drand.GroupPacket
	6,  // 24: drand.Control.Share:output_type -> drand.ShareResponse
	16, // 25: drand.Control.PublicKey:output_type -> drand.PublicKeyResponse
	18, // 26: drand.Control.PrivateKey:output_type -> drand.PrivateKeyResponse
	31, // 27: drand.Control.ChainInfo:output_type -> drand.ChainInfoPacket
	30, // 28: drand.Control.GroupFile:output_type -> drand.GroupPacket
	23, // 29: drand.Control.Shutdown:output_type -> drand.ShutdownResponse
	25, // 30: drand.Control.StartFollowChain:output_type -> drand.FollowProgress
	27, // 31: drand.Control.BackupDatabase:output_type -> drand.BackupDBResponse
	20, // [20:32] is the sub-list for method output_type
	8,  // [8:20] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_drand_control_proto_init() }
func file_drand_control_proto_init() {
	if File_drand_control_proto != nil {
		return
	}
	file_drand_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_drand_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupInfoPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitDKGPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntropyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResharePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReshareStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStoreStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CokeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CokeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTOMLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartFollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drand_control_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_drand_control_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GroupInfo_Path)(nil),
		(*GroupInfo_Url)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drand_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drand_control_proto_goTypes,
		DependencyIndexes: file_drand_control_proto_depIdxs,
		MessageInfos:      file_drand_control_proto_msgTypes,
	}.Build()
	File_drand_control_proto = out.File
	file_drand_control_proto_rawDesc = nil
	file_drand_control_proto_goTypes = nil
	file_drand_control_proto_depIdxs = nil
}
